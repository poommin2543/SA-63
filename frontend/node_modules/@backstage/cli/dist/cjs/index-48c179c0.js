'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var program = _interopDefault(require('commander'));
var chalk2 = _interopDefault(require('chalk'));
var fs = _interopDefault(require('fs-extra'));
var cliCommon = require('@backstage/cli-common');

class CustomError extends Error {
  get name() {
    return this.constructor.name;
  }
}
class ExitCodeError extends CustomError {
  constructor(code, command) {
    if (command) {
      super(`Command '${command}' exited with code ${code}`);
    } else {
      super(`Child exited with code ${code}`);
    }
    this.code = code;
  }
}
function exitWithError(error) {
  if (error instanceof ExitCodeError) {
    process.stderr.write(`
${chalk2.red(error.message)}

`);
    process.exit(error.code);
  } else {
    process.stderr.write(`
${chalk2.red(`${error}`)}

`);
    process.exit(1);
  }
}

const paths = cliCommon.findPaths(__dirname);

function findVersion() {
  const pkgContent = fs.readFileSync(paths.resolveOwn("package.json"), "utf8");
  return JSON.parse(pkgContent).version;
}
const version = findVersion();
const isDev = fs.pathExistsSync(paths.resolveOwn("src"));

const main = (argv) => {
  program.name("backstage-cli").version(version);
  program.command("app:build").description("Build an app for a production release").option("--stats", "Write bundle stats to output directory").action(lazyAction(() => Promise.resolve().then(function () { return require('./build-4ede5f3b.js'); }), "default"));
  program.command("app:serve").description("Serve an app for local development").option("--check", "Enable type checking and linting").action(lazyAction(() => Promise.resolve().then(function () { return require('./serve-6ac50491.js'); }), "default"));
  program.command("backend:build").description("Build a backend plugin").action(lazyAction(() => Promise.resolve().then(function () { return require('./build-125a0c98.js'); }), "default"));
  program.command("backend:build-image <image-tag>").description("Builds a docker image from the package, with all local deps included").action(lazyAction(() => Promise.resolve().then(function () { return require('./buildImage-8166f84b.js'); }), "default"));
  program.command("backend:dev").description("Start local development server with HMR for the backend").option("--check", "Enable type checking and linting").option("--inspect", "Enable debugger").action(lazyAction(() => Promise.resolve().then(function () { return require('./dev-bc62e6e9.js'); }), "default"));
  program.command("app:diff").option("--check", "Fail if changes are required").option("--yes", "Apply all changes").description("Diff an existing app with the creation template").action(lazyAction(() => Promise.resolve().then(function () { return require('./diff-d1a53b67.js'); }), "default"));
  program.command("create-plugin").description("Creates a new plugin in the current repository").action(lazyAction(() => Promise.resolve().then(function () { return require('./createPlugin-590b59fa.js'); }), "default"));
  program.command("remove-plugin").description("Removes plugin in the current repository").action(lazyAction(() => Promise.resolve().then(function () { return require('./removePlugin-b765c6da.js'); }), "default"));
  program.command("plugin:build").description("Build a plugin").action(lazyAction(() => Promise.resolve().then(function () { return require('./build-7b2482ae.js'); }), "default"));
  program.command("plugin:serve").description("Serves the dev/ folder of a plugin").option("--check", "Enable type checking and linting").action(lazyAction(() => Promise.resolve().then(function () { return require('./serve-0ca441c1.js'); }), "default"));
  program.command("plugin:export").description("Exports the dev/ folder of a plugin").option("--stats", "Write bundle stats to output directory").action(lazyAction(() => Promise.resolve().then(function () { return require('./export-d6b90f4a.js'); }), "default"));
  program.command("plugin:diff").option("--check", "Fail if changes are required").option("--yes", "Apply all changes").description("Diff an existing plugin with the creation template").action(lazyAction(() => Promise.resolve().then(function () { return require('./diff-ccdbd83a.js'); }), "default"));
  program.command("build").description("Build a package for publishing").option("--outputs <formats>", "List of formats to output [types,cjs,esm]").action(lazyAction(() => Promise.resolve().then(function () { return require('./build-4e171e66.js'); }), "default"));
  program.command("lint").option("--format <format>", "Lint report output format", "eslint-formatter-friendly").option("--fix", "Attempt to automatically fix violations").description("Lint a package").action(lazyAction(() => Promise.resolve().then(function () { return require('./lint-9d77e216.js'); }), "default"));
  program.command("test").allowUnknownOption(true).helpOption(", --backstage-cli-help").description("Run tests, forwarding args to Jest, defaulting to watch mode").action(lazyAction(() => Promise.resolve().then(function () { return require('./testCommand-38965bdf.js'); }), "default"));
  program.command("config:print").option("--with-secrets", "Include secrets in the printed configuration").option("--env <env>", "The environment to print configuration for [NODE_ENV or development]").option("--format <format>", "Format to print the configuration in, either json or yaml [yaml]").description("Print the app configuration for the current package").action(lazyAction(() => Promise.resolve().then(function () { return require('./print-31121c52.js'); }), "default"));
  program.command("prepack").description("Prepares a package for packaging before publishing").action(lazyAction(() => Promise.resolve().then(function () { return require('./pack-01f88eb3.js'); }), "pre"));
  program.command("postpack").description("Restores the changes made by the prepack command").action(lazyAction(() => Promise.resolve().then(function () { return require('./pack-01f88eb3.js'); }), "post"));
  program.command("clean").description("Delete cache directories").action(lazyAction(() => Promise.resolve().then(function () { return require('./clean-7d63d36d.js'); }), "default"));
  program.command("build-workspace <workspace-dir> ...<packages>").description("Builds a temporary dist workspace from the provided packages").action(lazyAction(() => Promise.resolve().then(function () { return require('./buildWorkspace-e0cbbbd4.js'); }), "default"));
  program.on("command:*", () => {
    console.log();
    console.log(chalk2.red(`Invalid command: ${chalk2.cyan(program.args.join(" "))}`));
    console.log(chalk2.red("See --help for a list of available commands."));
    console.log();
    process.exit(1);
  });
  if (!process.argv.slice(2).length) {
    program.outputHelp(chalk2.yellow);
  }
  program.parse(argv);
};
function lazyAction(actionRequireFunc, exportName) {
  return async (...args) => {
    try {
      const module = await actionRequireFunc();
      const actionFunc = module[exportName];
      await actionFunc(...args);
      process.exit(0);
    } catch (error) {
      exitWithError(error);
    }
  };
}
process.on("unhandledRejection", (rejection) => {
  if (rejection instanceof Error) {
    exitWithError(rejection);
  } else {
    exitWithError(new Error(`Unknown rejection: '${rejection}'`));
  }
});
main(process.argv);

exports.ExitCodeError = ExitCodeError;
exports.paths = paths;
exports.version = version;
