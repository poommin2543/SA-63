// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/poommin2543/app/ent/medicalequipment"
	"github.com/poommin2543/app/ent/medicaltype"
	"github.com/poommin2543/app/ent/physician"
	"github.com/poommin2543/app/ent/predicate"
	"github.com/poommin2543/app/ent/systemequipment"
)

// SystemequipmentUpdate is the builder for updating Systemequipment entities.
type SystemequipmentUpdate struct {
	config
	hooks      []Hook
	mutation   *SystemequipmentMutation
	predicates []predicate.Systemequipment
}

// Where adds a new predicate for the builder.
func (su *SystemequipmentUpdate) Where(ps ...predicate.Systemequipment) *SystemequipmentUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetAddedtime sets the addedtime field.
func (su *SystemequipmentUpdate) SetAddedtime(s string) *SystemequipmentUpdate {
	su.mutation.SetAddedtime(s)
	return su
}

// SetPhysicianID sets the physician edge to Physician by id.
func (su *SystemequipmentUpdate) SetPhysicianID(id int) *SystemequipmentUpdate {
	su.mutation.SetPhysicianID(id)
	return su
}

// SetNillablePhysicianID sets the physician edge to Physician by id if the given value is not nil.
func (su *SystemequipmentUpdate) SetNillablePhysicianID(id *int) *SystemequipmentUpdate {
	if id != nil {
		su = su.SetPhysicianID(*id)
	}
	return su
}

// SetPhysician sets the physician edge to Physician.
func (su *SystemequipmentUpdate) SetPhysician(p *Physician) *SystemequipmentUpdate {
	return su.SetPhysicianID(p.ID)
}

// SetMedicaltypeID sets the medicaltype edge to MedicalType by id.
func (su *SystemequipmentUpdate) SetMedicaltypeID(id int) *SystemequipmentUpdate {
	su.mutation.SetMedicaltypeID(id)
	return su
}

// SetNillableMedicaltypeID sets the medicaltype edge to MedicalType by id if the given value is not nil.
func (su *SystemequipmentUpdate) SetNillableMedicaltypeID(id *int) *SystemequipmentUpdate {
	if id != nil {
		su = su.SetMedicaltypeID(*id)
	}
	return su
}

// SetMedicaltype sets the medicaltype edge to MedicalType.
func (su *SystemequipmentUpdate) SetMedicaltype(m *MedicalType) *SystemequipmentUpdate {
	return su.SetMedicaltypeID(m.ID)
}

// SetMedicalequipmentID sets the medicalequipment edge to MedicalEquipment by id.
func (su *SystemequipmentUpdate) SetMedicalequipmentID(id int) *SystemequipmentUpdate {
	su.mutation.SetMedicalequipmentID(id)
	return su
}

// SetNillableMedicalequipmentID sets the medicalequipment edge to MedicalEquipment by id if the given value is not nil.
func (su *SystemequipmentUpdate) SetNillableMedicalequipmentID(id *int) *SystemequipmentUpdate {
	if id != nil {
		su = su.SetMedicalequipmentID(*id)
	}
	return su
}

// SetMedicalequipment sets the medicalequipment edge to MedicalEquipment.
func (su *SystemequipmentUpdate) SetMedicalequipment(m *MedicalEquipment) *SystemequipmentUpdate {
	return su.SetMedicalequipmentID(m.ID)
}

// Mutation returns the SystemequipmentMutation object of the builder.
func (su *SystemequipmentUpdate) Mutation() *SystemequipmentMutation {
	return su.mutation
}

// ClearPhysician clears the physician edge to Physician.
func (su *SystemequipmentUpdate) ClearPhysician() *SystemequipmentUpdate {
	su.mutation.ClearPhysician()
	return su
}

// ClearMedicaltype clears the medicaltype edge to MedicalType.
func (su *SystemequipmentUpdate) ClearMedicaltype() *SystemequipmentUpdate {
	su.mutation.ClearMedicaltype()
	return su
}

// ClearMedicalequipment clears the medicalequipment edge to MedicalEquipment.
func (su *SystemequipmentUpdate) ClearMedicalequipment() *SystemequipmentUpdate {
	su.mutation.ClearMedicalequipment()
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SystemequipmentUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemequipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SystemequipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SystemequipmentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SystemequipmentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SystemequipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   systemequipment.Table,
			Columns: systemequipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: systemequipment.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Addedtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemequipment.FieldAddedtime,
		})
	}
	if su.mutation.PhysicianCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.PhysicianTable,
			Columns: []string{systemequipment.PhysicianColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PhysicianIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.PhysicianTable,
			Columns: []string{systemequipment.PhysicianColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MedicaltypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.MedicaltypeTable,
			Columns: []string{systemequipment.MedicaltypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicaltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MedicaltypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.MedicaltypeTable,
			Columns: []string{systemequipment.MedicaltypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicaltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MedicalequipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.MedicalequipmentTable,
			Columns: []string{systemequipment.MedicalequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalequipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MedicalequipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.MedicalequipmentTable,
			Columns: []string{systemequipment.MedicalequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemequipment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SystemequipmentUpdateOne is the builder for updating a single Systemequipment entity.
type SystemequipmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *SystemequipmentMutation
}

// SetAddedtime sets the addedtime field.
func (suo *SystemequipmentUpdateOne) SetAddedtime(s string) *SystemequipmentUpdateOne {
	suo.mutation.SetAddedtime(s)
	return suo
}

// SetPhysicianID sets the physician edge to Physician by id.
func (suo *SystemequipmentUpdateOne) SetPhysicianID(id int) *SystemequipmentUpdateOne {
	suo.mutation.SetPhysicianID(id)
	return suo
}

// SetNillablePhysicianID sets the physician edge to Physician by id if the given value is not nil.
func (suo *SystemequipmentUpdateOne) SetNillablePhysicianID(id *int) *SystemequipmentUpdateOne {
	if id != nil {
		suo = suo.SetPhysicianID(*id)
	}
	return suo
}

// SetPhysician sets the physician edge to Physician.
func (suo *SystemequipmentUpdateOne) SetPhysician(p *Physician) *SystemequipmentUpdateOne {
	return suo.SetPhysicianID(p.ID)
}

// SetMedicaltypeID sets the medicaltype edge to MedicalType by id.
func (suo *SystemequipmentUpdateOne) SetMedicaltypeID(id int) *SystemequipmentUpdateOne {
	suo.mutation.SetMedicaltypeID(id)
	return suo
}

// SetNillableMedicaltypeID sets the medicaltype edge to MedicalType by id if the given value is not nil.
func (suo *SystemequipmentUpdateOne) SetNillableMedicaltypeID(id *int) *SystemequipmentUpdateOne {
	if id != nil {
		suo = suo.SetMedicaltypeID(*id)
	}
	return suo
}

// SetMedicaltype sets the medicaltype edge to MedicalType.
func (suo *SystemequipmentUpdateOne) SetMedicaltype(m *MedicalType) *SystemequipmentUpdateOne {
	return suo.SetMedicaltypeID(m.ID)
}

// SetMedicalequipmentID sets the medicalequipment edge to MedicalEquipment by id.
func (suo *SystemequipmentUpdateOne) SetMedicalequipmentID(id int) *SystemequipmentUpdateOne {
	suo.mutation.SetMedicalequipmentID(id)
	return suo
}

// SetNillableMedicalequipmentID sets the medicalequipment edge to MedicalEquipment by id if the given value is not nil.
func (suo *SystemequipmentUpdateOne) SetNillableMedicalequipmentID(id *int) *SystemequipmentUpdateOne {
	if id != nil {
		suo = suo.SetMedicalequipmentID(*id)
	}
	return suo
}

// SetMedicalequipment sets the medicalequipment edge to MedicalEquipment.
func (suo *SystemequipmentUpdateOne) SetMedicalequipment(m *MedicalEquipment) *SystemequipmentUpdateOne {
	return suo.SetMedicalequipmentID(m.ID)
}

// Mutation returns the SystemequipmentMutation object of the builder.
func (suo *SystemequipmentUpdateOne) Mutation() *SystemequipmentMutation {
	return suo.mutation
}

// ClearPhysician clears the physician edge to Physician.
func (suo *SystemequipmentUpdateOne) ClearPhysician() *SystemequipmentUpdateOne {
	suo.mutation.ClearPhysician()
	return suo
}

// ClearMedicaltype clears the medicaltype edge to MedicalType.
func (suo *SystemequipmentUpdateOne) ClearMedicaltype() *SystemequipmentUpdateOne {
	suo.mutation.ClearMedicaltype()
	return suo
}

// ClearMedicalequipment clears the medicalequipment edge to MedicalEquipment.
func (suo *SystemequipmentUpdateOne) ClearMedicalequipment() *SystemequipmentUpdateOne {
	suo.mutation.ClearMedicalequipment()
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *SystemequipmentUpdateOne) Save(ctx context.Context) (*Systemequipment, error) {

	var (
		err  error
		node *Systemequipment
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemequipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SystemequipmentUpdateOne) SaveX(ctx context.Context) *Systemequipment {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SystemequipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SystemequipmentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SystemequipmentUpdateOne) sqlSave(ctx context.Context) (s *Systemequipment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   systemequipment.Table,
			Columns: systemequipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: systemequipment.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Systemequipment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.Addedtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemequipment.FieldAddedtime,
		})
	}
	if suo.mutation.PhysicianCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.PhysicianTable,
			Columns: []string{systemequipment.PhysicianColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PhysicianIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.PhysicianTable,
			Columns: []string{systemequipment.PhysicianColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MedicaltypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.MedicaltypeTable,
			Columns: []string{systemequipment.MedicaltypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicaltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MedicaltypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.MedicaltypeTable,
			Columns: []string{systemequipment.MedicaltypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicaltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MedicalequipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.MedicalequipmentTable,
			Columns: []string{systemequipment.MedicalequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalequipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MedicalequipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.MedicalequipmentTable,
			Columns: []string{systemequipment.MedicalequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Systemequipment{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemequipment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
