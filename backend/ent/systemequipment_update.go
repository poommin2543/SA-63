// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/poommin2543/app/ent/medicalequipment"
	"github.com/poommin2543/app/ent/medicaltype"
	"github.com/poommin2543/app/ent/physician"
	"github.com/poommin2543/app/ent/predicate"
	"github.com/poommin2543/app/ent/systemequipment"
)

// SystemequipmentUpdate is the builder for updating Systemequipment entities.
type SystemequipmentUpdate struct {
	config
	hooks      []Hook
	mutation   *SystemequipmentMutation
	predicates []predicate.Systemequipment
}

// Where adds a new predicate for the builder.
func (su *SystemequipmentUpdate) Where(ps ...predicate.Systemequipment) *SystemequipmentUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetSystemID sets the System_ID field.
func (su *SystemequipmentUpdate) SetSystemID(s string) *SystemequipmentUpdate {
	su.mutation.SetSystemID(s)
	return su
}

// SetMedicalID sets the Medical_ID field.
func (su *SystemequipmentUpdate) SetMedicalID(s string) *SystemequipmentUpdate {
	su.mutation.SetMedicalID(s)
	return su
}

// SetTypeID sets the Type_ID field.
func (su *SystemequipmentUpdate) SetTypeID(s string) *SystemequipmentUpdate {
	su.mutation.SetTypeID(s)
	return su
}

// SetPHYSICIANID sets the PHYSICIAN_ID field.
func (su *SystemequipmentUpdate) SetPHYSICIANID(s string) *SystemequipmentUpdate {
	su.mutation.SetPHYSICIANID(s)
	return su
}

// SetSystemDATA sets the System_DATA field.
func (su *SystemequipmentUpdate) SetSystemDATA(t time.Time) *SystemequipmentUpdate {
	su.mutation.SetSystemDATA(t)
	return su
}

// SetOwnerID sets the owner edge to Physician by id.
func (su *SystemequipmentUpdate) SetOwnerID(id int) *SystemequipmentUpdate {
	su.mutation.SetOwnerID(id)
	return su
}

// SetNillableOwnerID sets the owner edge to Physician by id if the given value is not nil.
func (su *SystemequipmentUpdate) SetNillableOwnerID(id *int) *SystemequipmentUpdate {
	if id != nil {
		su = su.SetOwnerID(*id)
	}
	return su
}

// SetOwner sets the owner edge to Physician.
func (su *SystemequipmentUpdate) SetOwner(p *Physician) *SystemequipmentUpdate {
	return su.SetOwnerID(p.ID)
}

// SetOwneraID sets the ownera edge to Medicalequipment by id.
func (su *SystemequipmentUpdate) SetOwneraID(id int) *SystemequipmentUpdate {
	su.mutation.SetOwneraID(id)
	return su
}

// SetNillableOwneraID sets the ownera edge to Medicalequipment by id if the given value is not nil.
func (su *SystemequipmentUpdate) SetNillableOwneraID(id *int) *SystemequipmentUpdate {
	if id != nil {
		su = su.SetOwneraID(*id)
	}
	return su
}

// SetOwnera sets the ownera edge to Medicalequipment.
func (su *SystemequipmentUpdate) SetOwnera(m *Medicalequipment) *SystemequipmentUpdate {
	return su.SetOwneraID(m.ID)
}

// SetOwnerfID sets the ownerf edge to Medicaltype by id.
func (su *SystemequipmentUpdate) SetOwnerfID(id int) *SystemequipmentUpdate {
	su.mutation.SetOwnerfID(id)
	return su
}

// SetNillableOwnerfID sets the ownerf edge to Medicaltype by id if the given value is not nil.
func (su *SystemequipmentUpdate) SetNillableOwnerfID(id *int) *SystemequipmentUpdate {
	if id != nil {
		su = su.SetOwnerfID(*id)
	}
	return su
}

// SetOwnerf sets the ownerf edge to Medicaltype.
func (su *SystemequipmentUpdate) SetOwnerf(m *Medicaltype) *SystemequipmentUpdate {
	return su.SetOwnerfID(m.ID)
}

// Mutation returns the SystemequipmentMutation object of the builder.
func (su *SystemequipmentUpdate) Mutation() *SystemequipmentMutation {
	return su.mutation
}

// ClearOwner clears the owner edge to Physician.
func (su *SystemequipmentUpdate) ClearOwner() *SystemequipmentUpdate {
	su.mutation.ClearOwner()
	return su
}

// ClearOwnera clears the ownera edge to Medicalequipment.
func (su *SystemequipmentUpdate) ClearOwnera() *SystemequipmentUpdate {
	su.mutation.ClearOwnera()
	return su
}

// ClearOwnerf clears the ownerf edge to Medicaltype.
func (su *SystemequipmentUpdate) ClearOwnerf() *SystemequipmentUpdate {
	su.mutation.ClearOwnerf()
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SystemequipmentUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.SystemID(); ok {
		if err := systemequipment.SystemIDValidator(v); err != nil {
			return 0, &ValidationError{Name: "System_ID", err: fmt.Errorf("ent: validator failed for field \"System_ID\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemequipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SystemequipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SystemequipmentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SystemequipmentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SystemequipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   systemequipment.Table,
			Columns: systemequipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: systemequipment.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SystemID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemequipment.FieldSystemID,
		})
	}
	if value, ok := su.mutation.MedicalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemequipment.FieldMedicalID,
		})
	}
	if value, ok := su.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemequipment.FieldTypeID,
		})
	}
	if value, ok := su.mutation.PHYSICIANID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemequipment.FieldPHYSICIANID,
		})
	}
	if value, ok := su.mutation.SystemDATA(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systemequipment.FieldSystemDATA,
		})
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwnerTable,
			Columns: []string{systemequipment.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwnerTable,
			Columns: []string{systemequipment.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OwneraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwneraTable,
			Columns: []string{systemequipment.OwneraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalequipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwneraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwneraTable,
			Columns: []string{systemequipment.OwneraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OwnerfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwnerfTable,
			Columns: []string{systemequipment.OwnerfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicaltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwnerfTable,
			Columns: []string{systemequipment.OwnerfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicaltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemequipment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SystemequipmentUpdateOne is the builder for updating a single Systemequipment entity.
type SystemequipmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *SystemequipmentMutation
}

// SetSystemID sets the System_ID field.
func (suo *SystemequipmentUpdateOne) SetSystemID(s string) *SystemequipmentUpdateOne {
	suo.mutation.SetSystemID(s)
	return suo
}

// SetMedicalID sets the Medical_ID field.
func (suo *SystemequipmentUpdateOne) SetMedicalID(s string) *SystemequipmentUpdateOne {
	suo.mutation.SetMedicalID(s)
	return suo
}

// SetTypeID sets the Type_ID field.
func (suo *SystemequipmentUpdateOne) SetTypeID(s string) *SystemequipmentUpdateOne {
	suo.mutation.SetTypeID(s)
	return suo
}

// SetPHYSICIANID sets the PHYSICIAN_ID field.
func (suo *SystemequipmentUpdateOne) SetPHYSICIANID(s string) *SystemequipmentUpdateOne {
	suo.mutation.SetPHYSICIANID(s)
	return suo
}

// SetSystemDATA sets the System_DATA field.
func (suo *SystemequipmentUpdateOne) SetSystemDATA(t time.Time) *SystemequipmentUpdateOne {
	suo.mutation.SetSystemDATA(t)
	return suo
}

// SetOwnerID sets the owner edge to Physician by id.
func (suo *SystemequipmentUpdateOne) SetOwnerID(id int) *SystemequipmentUpdateOne {
	suo.mutation.SetOwnerID(id)
	return suo
}

// SetNillableOwnerID sets the owner edge to Physician by id if the given value is not nil.
func (suo *SystemequipmentUpdateOne) SetNillableOwnerID(id *int) *SystemequipmentUpdateOne {
	if id != nil {
		suo = suo.SetOwnerID(*id)
	}
	return suo
}

// SetOwner sets the owner edge to Physician.
func (suo *SystemequipmentUpdateOne) SetOwner(p *Physician) *SystemequipmentUpdateOne {
	return suo.SetOwnerID(p.ID)
}

// SetOwneraID sets the ownera edge to Medicalequipment by id.
func (suo *SystemequipmentUpdateOne) SetOwneraID(id int) *SystemequipmentUpdateOne {
	suo.mutation.SetOwneraID(id)
	return suo
}

// SetNillableOwneraID sets the ownera edge to Medicalequipment by id if the given value is not nil.
func (suo *SystemequipmentUpdateOne) SetNillableOwneraID(id *int) *SystemequipmentUpdateOne {
	if id != nil {
		suo = suo.SetOwneraID(*id)
	}
	return suo
}

// SetOwnera sets the ownera edge to Medicalequipment.
func (suo *SystemequipmentUpdateOne) SetOwnera(m *Medicalequipment) *SystemequipmentUpdateOne {
	return suo.SetOwneraID(m.ID)
}

// SetOwnerfID sets the ownerf edge to Medicaltype by id.
func (suo *SystemequipmentUpdateOne) SetOwnerfID(id int) *SystemequipmentUpdateOne {
	suo.mutation.SetOwnerfID(id)
	return suo
}

// SetNillableOwnerfID sets the ownerf edge to Medicaltype by id if the given value is not nil.
func (suo *SystemequipmentUpdateOne) SetNillableOwnerfID(id *int) *SystemequipmentUpdateOne {
	if id != nil {
		suo = suo.SetOwnerfID(*id)
	}
	return suo
}

// SetOwnerf sets the ownerf edge to Medicaltype.
func (suo *SystemequipmentUpdateOne) SetOwnerf(m *Medicaltype) *SystemequipmentUpdateOne {
	return suo.SetOwnerfID(m.ID)
}

// Mutation returns the SystemequipmentMutation object of the builder.
func (suo *SystemequipmentUpdateOne) Mutation() *SystemequipmentMutation {
	return suo.mutation
}

// ClearOwner clears the owner edge to Physician.
func (suo *SystemequipmentUpdateOne) ClearOwner() *SystemequipmentUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// ClearOwnera clears the ownera edge to Medicalequipment.
func (suo *SystemequipmentUpdateOne) ClearOwnera() *SystemequipmentUpdateOne {
	suo.mutation.ClearOwnera()
	return suo
}

// ClearOwnerf clears the ownerf edge to Medicaltype.
func (suo *SystemequipmentUpdateOne) ClearOwnerf() *SystemequipmentUpdateOne {
	suo.mutation.ClearOwnerf()
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *SystemequipmentUpdateOne) Save(ctx context.Context) (*Systemequipment, error) {
	if v, ok := suo.mutation.SystemID(); ok {
		if err := systemequipment.SystemIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "System_ID", err: fmt.Errorf("ent: validator failed for field \"System_ID\": %w", err)}
		}
	}

	var (
		err  error
		node *Systemequipment
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemequipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SystemequipmentUpdateOne) SaveX(ctx context.Context) *Systemequipment {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SystemequipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SystemequipmentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SystemequipmentUpdateOne) sqlSave(ctx context.Context) (s *Systemequipment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   systemequipment.Table,
			Columns: systemequipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: systemequipment.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Systemequipment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.SystemID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemequipment.FieldSystemID,
		})
	}
	if value, ok := suo.mutation.MedicalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemequipment.FieldMedicalID,
		})
	}
	if value, ok := suo.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemequipment.FieldTypeID,
		})
	}
	if value, ok := suo.mutation.PHYSICIANID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemequipment.FieldPHYSICIANID,
		})
	}
	if value, ok := suo.mutation.SystemDATA(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systemequipment.FieldSystemDATA,
		})
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwnerTable,
			Columns: []string{systemequipment.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwnerTable,
			Columns: []string{systemequipment.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OwneraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwneraTable,
			Columns: []string{systemequipment.OwneraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalequipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwneraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwneraTable,
			Columns: []string{systemequipment.OwneraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OwnerfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwnerfTable,
			Columns: []string{systemequipment.OwnerfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicaltype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   systemequipment.OwnerfTable,
			Columns: []string{systemequipment.OwnerfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicaltype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Systemequipment{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemequipment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
