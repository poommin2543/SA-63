// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/poommin2543/app/ent/medicalequipment"
	"github.com/poommin2543/app/ent/medicaltype"
	"github.com/poommin2543/app/ent/physician"
	"github.com/poommin2543/app/ent/systemequipment"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMedicalEquipment = "MedicalEquipment"
	TypeMedicalType      = "MedicalType"
	TypePhysician        = "Physician"
	TypeSystemequipment  = "Systemequipment"
)

// MedicalEquipmentMutation represents an operation that mutate the MedicalEquipments
// nodes in the graph.
type MedicalEquipmentMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	stock                  *int
	addstock               *int
	clearedFields          map[string]struct{}
	systemequipment        map[int]struct{}
	removedsystemequipment map[int]struct{}
	done                   bool
	oldValue               func(context.Context) (*MedicalEquipment, error)
}

var _ ent.Mutation = (*MedicalEquipmentMutation)(nil)

// medicalequipmentOption allows to manage the mutation configuration using functional options.
type medicalequipmentOption func(*MedicalEquipmentMutation)

// newMedicalEquipmentMutation creates new mutation for $n.Name.
func newMedicalEquipmentMutation(c config, op Op, opts ...medicalequipmentOption) *MedicalEquipmentMutation {
	m := &MedicalEquipmentMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicalEquipment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicalEquipmentID sets the id field of the mutation.
func withMedicalEquipmentID(id int) medicalequipmentOption {
	return func(m *MedicalEquipmentMutation) {
		var (
			err   error
			once  sync.Once
			value *MedicalEquipment
		)
		m.oldValue = func(ctx context.Context) (*MedicalEquipment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MedicalEquipment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicalEquipment sets the old MedicalEquipment of the mutation.
func withMedicalEquipment(node *MedicalEquipment) medicalequipmentOption {
	return func(m *MedicalEquipmentMutation) {
		m.oldValue = func(context.Context) (*MedicalEquipment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicalEquipmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicalEquipmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MedicalEquipmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *MedicalEquipmentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *MedicalEquipmentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the MedicalEquipment.
// If the MedicalEquipment object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MedicalEquipmentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *MedicalEquipmentMutation) ResetName() {
	m.name = nil
}

// SetStock sets the stock field.
func (m *MedicalEquipmentMutation) SetStock(i int) {
	m.stock = &i
	m.addstock = nil
}

// Stock returns the stock value in the mutation.
func (m *MedicalEquipmentMutation) Stock() (r int, exists bool) {
	v := m.stock
	if v == nil {
		return
	}
	return *v, true
}

// OldStock returns the old stock value of the MedicalEquipment.
// If the MedicalEquipment object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MedicalEquipmentMutation) OldStock(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStock is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStock: %w", err)
	}
	return oldValue.Stock, nil
}

// AddStock adds i to stock.
func (m *MedicalEquipmentMutation) AddStock(i int) {
	if m.addstock != nil {
		*m.addstock += i
	} else {
		m.addstock = &i
	}
}

// AddedStock returns the value that was added to the stock field in this mutation.
func (m *MedicalEquipmentMutation) AddedStock() (r int, exists bool) {
	v := m.addstock
	if v == nil {
		return
	}
	return *v, true
}

// ResetStock reset all changes of the "stock" field.
func (m *MedicalEquipmentMutation) ResetStock() {
	m.stock = nil
	m.addstock = nil
}

// AddSystemequipmentIDs adds the systemequipment edge to Systemequipment by ids.
func (m *MedicalEquipmentMutation) AddSystemequipmentIDs(ids ...int) {
	if m.systemequipment == nil {
		m.systemequipment = make(map[int]struct{})
	}
	for i := range ids {
		m.systemequipment[ids[i]] = struct{}{}
	}
}

// RemoveSystemequipmentIDs removes the systemequipment edge to Systemequipment by ids.
func (m *MedicalEquipmentMutation) RemoveSystemequipmentIDs(ids ...int) {
	if m.removedsystemequipment == nil {
		m.removedsystemequipment = make(map[int]struct{})
	}
	for i := range ids {
		m.removedsystemequipment[ids[i]] = struct{}{}
	}
}

// RemovedSystemequipment returns the removed ids of systemequipment.
func (m *MedicalEquipmentMutation) RemovedSystemequipmentIDs() (ids []int) {
	for id := range m.removedsystemequipment {
		ids = append(ids, id)
	}
	return
}

// SystemequipmentIDs returns the systemequipment ids in the mutation.
func (m *MedicalEquipmentMutation) SystemequipmentIDs() (ids []int) {
	for id := range m.systemequipment {
		ids = append(ids, id)
	}
	return
}

// ResetSystemequipment reset all changes of the "systemequipment" edge.
func (m *MedicalEquipmentMutation) ResetSystemequipment() {
	m.systemequipment = nil
	m.removedsystemequipment = nil
}

// Op returns the operation name.
func (m *MedicalEquipmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MedicalEquipment).
func (m *MedicalEquipmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MedicalEquipmentMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, medicalequipment.FieldName)
	}
	if m.stock != nil {
		fields = append(fields, medicalequipment.FieldStock)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MedicalEquipmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medicalequipment.FieldName:
		return m.Name()
	case medicalequipment.FieldStock:
		return m.Stock()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MedicalEquipmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medicalequipment.FieldName:
		return m.OldName(ctx)
	case medicalequipment.FieldStock:
		return m.OldStock(ctx)
	}
	return nil, fmt.Errorf("unknown MedicalEquipment field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalEquipmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medicalequipment.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case medicalequipment.FieldStock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStock(v)
		return nil
	}
	return fmt.Errorf("unknown MedicalEquipment field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MedicalEquipmentMutation) AddedFields() []string {
	var fields []string
	if m.addstock != nil {
		fields = append(fields, medicalequipment.FieldStock)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MedicalEquipmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case medicalequipment.FieldStock:
		return m.AddedStock()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalEquipmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case medicalequipment.FieldStock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStock(v)
		return nil
	}
	return fmt.Errorf("unknown MedicalEquipment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MedicalEquipmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MedicalEquipmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicalEquipmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MedicalEquipment nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MedicalEquipmentMutation) ResetField(name string) error {
	switch name {
	case medicalequipment.FieldName:
		m.ResetName()
		return nil
	case medicalequipment.FieldStock:
		m.ResetStock()
		return nil
	}
	return fmt.Errorf("unknown MedicalEquipment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MedicalEquipmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.systemequipment != nil {
		edges = append(edges, medicalequipment.EdgeSystemequipment)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MedicalEquipmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case medicalequipment.EdgeSystemequipment:
		ids := make([]ent.Value, 0, len(m.systemequipment))
		for id := range m.systemequipment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MedicalEquipmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsystemequipment != nil {
		edges = append(edges, medicalequipment.EdgeSystemequipment)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MedicalEquipmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case medicalequipment.EdgeSystemequipment:
		ids := make([]ent.Value, 0, len(m.removedsystemequipment))
		for id := range m.removedsystemequipment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MedicalEquipmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MedicalEquipmentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MedicalEquipmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown MedicalEquipment unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MedicalEquipmentMutation) ResetEdge(name string) error {
	switch name {
	case medicalequipment.EdgeSystemequipment:
		m.ResetSystemequipment()
		return nil
	}
	return fmt.Errorf("unknown MedicalEquipment edge %s", name)
}

// MedicalTypeMutation represents an operation that mutate the MedicalTypes
// nodes in the graph.
type MedicalTypeMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	clearedFields          map[string]struct{}
	systemequipment        map[int]struct{}
	removedsystemequipment map[int]struct{}
	done                   bool
	oldValue               func(context.Context) (*MedicalType, error)
}

var _ ent.Mutation = (*MedicalTypeMutation)(nil)

// medicaltypeOption allows to manage the mutation configuration using functional options.
type medicaltypeOption func(*MedicalTypeMutation)

// newMedicalTypeMutation creates new mutation for $n.Name.
func newMedicalTypeMutation(c config, op Op, opts ...medicaltypeOption) *MedicalTypeMutation {
	m := &MedicalTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicalType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicalTypeID sets the id field of the mutation.
func withMedicalTypeID(id int) medicaltypeOption {
	return func(m *MedicalTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *MedicalType
		)
		m.oldValue = func(ctx context.Context) (*MedicalType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MedicalType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicalType sets the old MedicalType of the mutation.
func withMedicalType(node *MedicalType) medicaltypeOption {
	return func(m *MedicalTypeMutation) {
		m.oldValue = func(context.Context) (*MedicalType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicalTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicalTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MedicalTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *MedicalTypeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *MedicalTypeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the MedicalType.
// If the MedicalType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MedicalTypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *MedicalTypeMutation) ResetName() {
	m.name = nil
}

// AddSystemequipmentIDs adds the systemequipment edge to Systemequipment by ids.
func (m *MedicalTypeMutation) AddSystemequipmentIDs(ids ...int) {
	if m.systemequipment == nil {
		m.systemequipment = make(map[int]struct{})
	}
	for i := range ids {
		m.systemequipment[ids[i]] = struct{}{}
	}
}

// RemoveSystemequipmentIDs removes the systemequipment edge to Systemequipment by ids.
func (m *MedicalTypeMutation) RemoveSystemequipmentIDs(ids ...int) {
	if m.removedsystemequipment == nil {
		m.removedsystemequipment = make(map[int]struct{})
	}
	for i := range ids {
		m.removedsystemequipment[ids[i]] = struct{}{}
	}
}

// RemovedSystemequipment returns the removed ids of systemequipment.
func (m *MedicalTypeMutation) RemovedSystemequipmentIDs() (ids []int) {
	for id := range m.removedsystemequipment {
		ids = append(ids, id)
	}
	return
}

// SystemequipmentIDs returns the systemequipment ids in the mutation.
func (m *MedicalTypeMutation) SystemequipmentIDs() (ids []int) {
	for id := range m.systemequipment {
		ids = append(ids, id)
	}
	return
}

// ResetSystemequipment reset all changes of the "systemequipment" edge.
func (m *MedicalTypeMutation) ResetSystemequipment() {
	m.systemequipment = nil
	m.removedsystemequipment = nil
}

// Op returns the operation name.
func (m *MedicalTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MedicalType).
func (m *MedicalTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MedicalTypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, medicaltype.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MedicalTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medicaltype.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MedicalTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medicaltype.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown MedicalType field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medicaltype.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown MedicalType field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MedicalTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MedicalTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MedicalType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MedicalTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MedicalTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicalTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MedicalType nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MedicalTypeMutation) ResetField(name string) error {
	switch name {
	case medicaltype.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown MedicalType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MedicalTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.systemequipment != nil {
		edges = append(edges, medicaltype.EdgeSystemequipment)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MedicalTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case medicaltype.EdgeSystemequipment:
		ids := make([]ent.Value, 0, len(m.systemequipment))
		for id := range m.systemequipment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MedicalTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsystemequipment != nil {
		edges = append(edges, medicaltype.EdgeSystemequipment)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MedicalTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case medicaltype.EdgeSystemequipment:
		ids := make([]ent.Value, 0, len(m.removedsystemequipment))
		for id := range m.removedsystemequipment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MedicalTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MedicalTypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MedicalTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown MedicalType unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MedicalTypeMutation) ResetEdge(name string) error {
	switch name {
	case medicaltype.EdgeSystemequipment:
		m.ResetSystemequipment()
		return nil
	}
	return fmt.Errorf("unknown MedicalType edge %s", name)
}

// PhysicianMutation represents an operation that mutate the Physicians
// nodes in the graph.
type PhysicianMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	email                  *string
	clearedFields          map[string]struct{}
	systemequipment        map[int]struct{}
	removedsystemequipment map[int]struct{}
	done                   bool
	oldValue               func(context.Context) (*Physician, error)
}

var _ ent.Mutation = (*PhysicianMutation)(nil)

// physicianOption allows to manage the mutation configuration using functional options.
type physicianOption func(*PhysicianMutation)

// newPhysicianMutation creates new mutation for $n.Name.
func newPhysicianMutation(c config, op Op, opts ...physicianOption) *PhysicianMutation {
	m := &PhysicianMutation{
		config:        c,
		op:            op,
		typ:           TypePhysician,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPhysicianID sets the id field of the mutation.
func withPhysicianID(id int) physicianOption {
	return func(m *PhysicianMutation) {
		var (
			err   error
			once  sync.Once
			value *Physician
		)
		m.oldValue = func(ctx context.Context) (*Physician, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Physician.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPhysician sets the old Physician of the mutation.
func withPhysician(node *Physician) physicianOption {
	return func(m *PhysicianMutation) {
		m.oldValue = func(context.Context) (*Physician, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PhysicianMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PhysicianMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PhysicianMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *PhysicianMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *PhysicianMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Physician.
// If the Physician object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PhysicianMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *PhysicianMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the email field.
func (m *PhysicianMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *PhysicianMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the Physician.
// If the Physician object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PhysicianMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *PhysicianMutation) ResetEmail() {
	m.email = nil
}

// AddSystemequipmentIDs adds the systemequipment edge to Systemequipment by ids.
func (m *PhysicianMutation) AddSystemequipmentIDs(ids ...int) {
	if m.systemequipment == nil {
		m.systemequipment = make(map[int]struct{})
	}
	for i := range ids {
		m.systemequipment[ids[i]] = struct{}{}
	}
}

// RemoveSystemequipmentIDs removes the systemequipment edge to Systemequipment by ids.
func (m *PhysicianMutation) RemoveSystemequipmentIDs(ids ...int) {
	if m.removedsystemequipment == nil {
		m.removedsystemequipment = make(map[int]struct{})
	}
	for i := range ids {
		m.removedsystemequipment[ids[i]] = struct{}{}
	}
}

// RemovedSystemequipment returns the removed ids of systemequipment.
func (m *PhysicianMutation) RemovedSystemequipmentIDs() (ids []int) {
	for id := range m.removedsystemequipment {
		ids = append(ids, id)
	}
	return
}

// SystemequipmentIDs returns the systemequipment ids in the mutation.
func (m *PhysicianMutation) SystemequipmentIDs() (ids []int) {
	for id := range m.systemequipment {
		ids = append(ids, id)
	}
	return
}

// ResetSystemequipment reset all changes of the "systemequipment" edge.
func (m *PhysicianMutation) ResetSystemequipment() {
	m.systemequipment = nil
	m.removedsystemequipment = nil
}

// Op returns the operation name.
func (m *PhysicianMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Physician).
func (m *PhysicianMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PhysicianMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, physician.FieldName)
	}
	if m.email != nil {
		fields = append(fields, physician.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PhysicianMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case physician.FieldName:
		return m.Name()
	case physician.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PhysicianMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case physician.FieldName:
		return m.OldName(ctx)
	case physician.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown Physician field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PhysicianMutation) SetField(name string, value ent.Value) error {
	switch name {
	case physician.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case physician.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown Physician field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PhysicianMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PhysicianMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PhysicianMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Physician numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PhysicianMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PhysicianMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PhysicianMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Physician nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PhysicianMutation) ResetField(name string) error {
	switch name {
	case physician.FieldName:
		m.ResetName()
		return nil
	case physician.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown Physician field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PhysicianMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.systemequipment != nil {
		edges = append(edges, physician.EdgeSystemequipment)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PhysicianMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case physician.EdgeSystemequipment:
		ids := make([]ent.Value, 0, len(m.systemequipment))
		for id := range m.systemequipment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PhysicianMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsystemequipment != nil {
		edges = append(edges, physician.EdgeSystemequipment)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PhysicianMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case physician.EdgeSystemequipment:
		ids := make([]ent.Value, 0, len(m.removedsystemequipment))
		for id := range m.removedsystemequipment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PhysicianMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PhysicianMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PhysicianMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Physician unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PhysicianMutation) ResetEdge(name string) error {
	switch name {
	case physician.EdgeSystemequipment:
		m.ResetSystemequipment()
		return nil
	}
	return fmt.Errorf("unknown Physician edge %s", name)
}

// SystemequipmentMutation represents an operation that mutate the Systemequipments
// nodes in the graph.
type SystemequipmentMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	clearedFields           map[string]struct{}
	physician               *int
	clearedphysician        bool
	medicaltype             *int
	clearedmedicaltype      bool
	medicalequipment        *int
	clearedmedicalequipment bool
	done                    bool
	oldValue                func(context.Context) (*Systemequipment, error)
}

var _ ent.Mutation = (*SystemequipmentMutation)(nil)

// systemequipmentOption allows to manage the mutation configuration using functional options.
type systemequipmentOption func(*SystemequipmentMutation)

// newSystemequipmentMutation creates new mutation for $n.Name.
func newSystemequipmentMutation(c config, op Op, opts ...systemequipmentOption) *SystemequipmentMutation {
	m := &SystemequipmentMutation{
		config:        c,
		op:            op,
		typ:           TypeSystemequipment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSystemequipmentID sets the id field of the mutation.
func withSystemequipmentID(id int) systemequipmentOption {
	return func(m *SystemequipmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Systemequipment
		)
		m.oldValue = func(ctx context.Context) (*Systemequipment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Systemequipment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSystemequipment sets the old Systemequipment of the mutation.
func withSystemequipment(node *Systemequipment) systemequipmentOption {
	return func(m *SystemequipmentMutation) {
		m.oldValue = func(context.Context) (*Systemequipment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SystemequipmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SystemequipmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SystemequipmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPhysicianID sets the physician edge to Physician by id.
func (m *SystemequipmentMutation) SetPhysicianID(id int) {
	m.physician = &id
}

// ClearPhysician clears the physician edge to Physician.
func (m *SystemequipmentMutation) ClearPhysician() {
	m.clearedphysician = true
}

// PhysicianCleared returns if the edge physician was cleared.
func (m *SystemequipmentMutation) PhysicianCleared() bool {
	return m.clearedphysician
}

// PhysicianID returns the physician id in the mutation.
func (m *SystemequipmentMutation) PhysicianID() (id int, exists bool) {
	if m.physician != nil {
		return *m.physician, true
	}
	return
}

// PhysicianIDs returns the physician ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PhysicianID instead. It exists only for internal usage by the builders.
func (m *SystemequipmentMutation) PhysicianIDs() (ids []int) {
	if id := m.physician; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPhysician reset all changes of the "physician" edge.
func (m *SystemequipmentMutation) ResetPhysician() {
	m.physician = nil
	m.clearedphysician = false
}

// SetMedicaltypeID sets the medicaltype edge to MedicalType by id.
func (m *SystemequipmentMutation) SetMedicaltypeID(id int) {
	m.medicaltype = &id
}

// ClearMedicaltype clears the medicaltype edge to MedicalType.
func (m *SystemequipmentMutation) ClearMedicaltype() {
	m.clearedmedicaltype = true
}

// MedicaltypeCleared returns if the edge medicaltype was cleared.
func (m *SystemequipmentMutation) MedicaltypeCleared() bool {
	return m.clearedmedicaltype
}

// MedicaltypeID returns the medicaltype id in the mutation.
func (m *SystemequipmentMutation) MedicaltypeID() (id int, exists bool) {
	if m.medicaltype != nil {
		return *m.medicaltype, true
	}
	return
}

// MedicaltypeIDs returns the medicaltype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// MedicaltypeID instead. It exists only for internal usage by the builders.
func (m *SystemequipmentMutation) MedicaltypeIDs() (ids []int) {
	if id := m.medicaltype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMedicaltype reset all changes of the "medicaltype" edge.
func (m *SystemequipmentMutation) ResetMedicaltype() {
	m.medicaltype = nil
	m.clearedmedicaltype = false
}

// SetMedicalequipmentID sets the medicalequipment edge to MedicalEquipment by id.
func (m *SystemequipmentMutation) SetMedicalequipmentID(id int) {
	m.medicalequipment = &id
}

// ClearMedicalequipment clears the medicalequipment edge to MedicalEquipment.
func (m *SystemequipmentMutation) ClearMedicalequipment() {
	m.clearedmedicalequipment = true
}

// MedicalequipmentCleared returns if the edge medicalequipment was cleared.
func (m *SystemequipmentMutation) MedicalequipmentCleared() bool {
	return m.clearedmedicalequipment
}

// MedicalequipmentID returns the medicalequipment id in the mutation.
func (m *SystemequipmentMutation) MedicalequipmentID() (id int, exists bool) {
	if m.medicalequipment != nil {
		return *m.medicalequipment, true
	}
	return
}

// MedicalequipmentIDs returns the medicalequipment ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// MedicalequipmentID instead. It exists only for internal usage by the builders.
func (m *SystemequipmentMutation) MedicalequipmentIDs() (ids []int) {
	if id := m.medicalequipment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMedicalequipment reset all changes of the "medicalequipment" edge.
func (m *SystemequipmentMutation) ResetMedicalequipment() {
	m.medicalequipment = nil
	m.clearedmedicalequipment = false
}

// Op returns the operation name.
func (m *SystemequipmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Systemequipment).
func (m *SystemequipmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SystemequipmentMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SystemequipmentMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SystemequipmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Systemequipment field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SystemequipmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Systemequipment field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SystemequipmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SystemequipmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SystemequipmentMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Systemequipment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SystemequipmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SystemequipmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SystemequipmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Systemequipment nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SystemequipmentMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Systemequipment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SystemequipmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.physician != nil {
		edges = append(edges, systemequipment.EdgePhysician)
	}
	if m.medicaltype != nil {
		edges = append(edges, systemequipment.EdgeMedicaltype)
	}
	if m.medicalequipment != nil {
		edges = append(edges, systemequipment.EdgeMedicalequipment)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SystemequipmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case systemequipment.EdgePhysician:
		if id := m.physician; id != nil {
			return []ent.Value{*id}
		}
	case systemequipment.EdgeMedicaltype:
		if id := m.medicaltype; id != nil {
			return []ent.Value{*id}
		}
	case systemequipment.EdgeMedicalequipment:
		if id := m.medicalequipment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SystemequipmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SystemequipmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SystemequipmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedphysician {
		edges = append(edges, systemequipment.EdgePhysician)
	}
	if m.clearedmedicaltype {
		edges = append(edges, systemequipment.EdgeMedicaltype)
	}
	if m.clearedmedicalequipment {
		edges = append(edges, systemequipment.EdgeMedicalequipment)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SystemequipmentMutation) EdgeCleared(name string) bool {
	switch name {
	case systemequipment.EdgePhysician:
		return m.clearedphysician
	case systemequipment.EdgeMedicaltype:
		return m.clearedmedicaltype
	case systemequipment.EdgeMedicalequipment:
		return m.clearedmedicalequipment
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SystemequipmentMutation) ClearEdge(name string) error {
	switch name {
	case systemequipment.EdgePhysician:
		m.ClearPhysician()
		return nil
	case systemequipment.EdgeMedicaltype:
		m.ClearMedicaltype()
		return nil
	case systemequipment.EdgeMedicalequipment:
		m.ClearMedicalequipment()
		return nil
	}
	return fmt.Errorf("unknown Systemequipment unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SystemequipmentMutation) ResetEdge(name string) error {
	switch name {
	case systemequipment.EdgePhysician:
		m.ResetPhysician()
		return nil
	case systemequipment.EdgeMedicaltype:
		m.ResetMedicaltype()
		return nil
	case systemequipment.EdgeMedicalequipment:
		m.ResetMedicalequipment()
		return nil
	}
	return fmt.Errorf("unknown Systemequipment edge %s", name)
}
