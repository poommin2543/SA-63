// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/poommin2543/app/ent/medicalequipment"
	"github.com/poommin2543/app/ent/medicaltype"
	"github.com/poommin2543/app/ent/physician"
	"github.com/poommin2543/app/ent/systemequipment"
)

// Systemequipment is the model entity for the Systemequipment schema.
type Systemequipment struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SystemequipmentQuery when eager-loading is set.
	Edges                             SystemequipmentEdges `json:"edges"`
	medical_equipment_systemequipment *int
	medical_type_systemequipment      *int
	physician_systemequipment         *int
}

// SystemequipmentEdges holds the relations/edges for other nodes in the graph.
type SystemequipmentEdges struct {
	// Physician holds the value of the physician edge.
	Physician *Physician
	// Medicaltype holds the value of the medicaltype edge.
	Medicaltype *MedicalType
	// Medicalequipment holds the value of the medicalequipment edge.
	Medicalequipment *MedicalEquipment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PhysicianOrErr returns the Physician value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemequipmentEdges) PhysicianOrErr() (*Physician, error) {
	if e.loadedTypes[0] {
		if e.Physician == nil {
			// The edge physician was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: physician.Label}
		}
		return e.Physician, nil
	}
	return nil, &NotLoadedError{edge: "physician"}
}

// MedicaltypeOrErr returns the Medicaltype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemequipmentEdges) MedicaltypeOrErr() (*MedicalType, error) {
	if e.loadedTypes[1] {
		if e.Medicaltype == nil {
			// The edge medicaltype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: medicaltype.Label}
		}
		return e.Medicaltype, nil
	}
	return nil, &NotLoadedError{edge: "medicaltype"}
}

// MedicalequipmentOrErr returns the Medicalequipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SystemequipmentEdges) MedicalequipmentOrErr() (*MedicalEquipment, error) {
	if e.loadedTypes[2] {
		if e.Medicalequipment == nil {
			// The edge medicalequipment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: medicalequipment.Label}
		}
		return e.Medicalequipment, nil
	}
	return nil, &NotLoadedError{edge: "medicalequipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Systemequipment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Systemequipment) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // medical_equipment_systemequipment
		&sql.NullInt64{}, // medical_type_systemequipment
		&sql.NullInt64{}, // physician_systemequipment
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Systemequipment fields.
func (s *Systemequipment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(systemequipment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(systemequipment.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field medical_equipment_systemequipment", value)
		} else if value.Valid {
			s.medical_equipment_systemequipment = new(int)
			*s.medical_equipment_systemequipment = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field medical_type_systemequipment", value)
		} else if value.Valid {
			s.medical_type_systemequipment = new(int)
			*s.medical_type_systemequipment = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field physician_systemequipment", value)
		} else if value.Valid {
			s.physician_systemequipment = new(int)
			*s.physician_systemequipment = int(value.Int64)
		}
	}
	return nil
}

// QueryPhysician queries the physician edge of the Systemequipment.
func (s *Systemequipment) QueryPhysician() *PhysicianQuery {
	return (&SystemequipmentClient{config: s.config}).QueryPhysician(s)
}

// QueryMedicaltype queries the medicaltype edge of the Systemequipment.
func (s *Systemequipment) QueryMedicaltype() *MedicalTypeQuery {
	return (&SystemequipmentClient{config: s.config}).QueryMedicaltype(s)
}

// QueryMedicalequipment queries the medicalequipment edge of the Systemequipment.
func (s *Systemequipment) QueryMedicalequipment() *MedicalEquipmentQuery {
	return (&SystemequipmentClient{config: s.config}).QueryMedicalequipment(s)
}

// Update returns a builder for updating this Systemequipment.
// Note that, you need to call Systemequipment.Unwrap() before calling this method, if this Systemequipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Systemequipment) Update() *SystemequipmentUpdateOne {
	return (&SystemequipmentClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Systemequipment) Unwrap() *Systemequipment {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Systemequipment is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Systemequipment) String() string {
	var builder strings.Builder
	builder.WriteString("Systemequipment(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Systemequipments is a parsable slice of Systemequipment.
type Systemequipments []*Systemequipment

func (s Systemequipments) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
