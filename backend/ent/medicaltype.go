// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/poommin2543/app/ent/medicaltype"
)

// Medicaltype is the model entity for the Medicaltype schema.
type Medicaltype struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TypeID holds the value of the "Type_ID" field.
	TypeID string `json:"Type_ID,omitempty"`
	// TypeName holds the value of the "Type_name" field.
	TypeName string `json:"Type_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MedicaltypeQuery when eager-loading is set.
	Edges MedicaltypeEdges `json:"edges"`
}

// MedicaltypeEdges holds the relations/edges for other nodes in the graph.
type MedicaltypeEdges struct {
	// MedicalType holds the value of the Medical_type edge.
	MedicalType []*Systemequipment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MedicalTypeOrErr returns the MedicalType value or an error if the edge
// was not loaded in eager-loading.
func (e MedicaltypeEdges) MedicalTypeOrErr() ([]*Systemequipment, error) {
	if e.loadedTypes[0] {
		return e.MedicalType, nil
	}
	return nil, &NotLoadedError{edge: "Medical_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Medicaltype) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Type_ID
		&sql.NullString{}, // Type_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Medicaltype fields.
func (m *Medicaltype) assignValues(values ...interface{}) error {
	if m, n := len(values), len(medicaltype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Type_ID", values[0])
	} else if value.Valid {
		m.TypeID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Type_name", values[1])
	} else if value.Valid {
		m.TypeName = value.String
	}
	return nil
}

// QueryMedicalType queries the Medical_type edge of the Medicaltype.
func (m *Medicaltype) QueryMedicalType() *SystemequipmentQuery {
	return (&MedicaltypeClient{config: m.config}).QueryMedicalType(m)
}

// Update returns a builder for updating this Medicaltype.
// Note that, you need to call Medicaltype.Unwrap() before calling this method, if this Medicaltype
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Medicaltype) Update() *MedicaltypeUpdateOne {
	return (&MedicaltypeClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Medicaltype) Unwrap() *Medicaltype {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Medicaltype is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Medicaltype) String() string {
	var builder strings.Builder
	builder.WriteString("Medicaltype(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", Type_ID=")
	builder.WriteString(m.TypeID)
	builder.WriteString(", Type_name=")
	builder.WriteString(m.TypeName)
	builder.WriteByte(')')
	return builder.String()
}

// Medicaltypes is a parsable slice of Medicaltype.
type Medicaltypes []*Medicaltype

func (m Medicaltypes) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
