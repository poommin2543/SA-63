// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/poommin2543/app/ent/medicalequipment"
	"github.com/poommin2543/app/ent/predicate"
	"github.com/poommin2543/app/ent/systemequipment"
)

// MedicalEquipmentUpdate is the builder for updating MedicalEquipment entities.
type MedicalEquipmentUpdate struct {
	config
	hooks      []Hook
	mutation   *MedicalEquipmentMutation
	predicates []predicate.MedicalEquipment
}

// Where adds a new predicate for the builder.
func (meu *MedicalEquipmentUpdate) Where(ps ...predicate.MedicalEquipment) *MedicalEquipmentUpdate {
	meu.predicates = append(meu.predicates, ps...)
	return meu
}

// SetName sets the name field.
func (meu *MedicalEquipmentUpdate) SetName(s string) *MedicalEquipmentUpdate {
	meu.mutation.SetName(s)
	return meu
}

// SetStock sets the stock field.
func (meu *MedicalEquipmentUpdate) SetStock(i int) *MedicalEquipmentUpdate {
	meu.mutation.ResetStock()
	meu.mutation.SetStock(i)
	return meu
}

// AddStock adds i to stock.
func (meu *MedicalEquipmentUpdate) AddStock(i int) *MedicalEquipmentUpdate {
	meu.mutation.AddStock(i)
	return meu
}

// AddSystemequipmentIDs adds the systemequipment edge to Systemequipment by ids.
func (meu *MedicalEquipmentUpdate) AddSystemequipmentIDs(ids ...int) *MedicalEquipmentUpdate {
	meu.mutation.AddSystemequipmentIDs(ids...)
	return meu
}

// AddSystemequipment adds the systemequipment edges to Systemequipment.
func (meu *MedicalEquipmentUpdate) AddSystemequipment(s ...*Systemequipment) *MedicalEquipmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return meu.AddSystemequipmentIDs(ids...)
}

// Mutation returns the MedicalEquipmentMutation object of the builder.
func (meu *MedicalEquipmentUpdate) Mutation() *MedicalEquipmentMutation {
	return meu.mutation
}

// RemoveSystemequipmentIDs removes the systemequipment edge to Systemequipment by ids.
func (meu *MedicalEquipmentUpdate) RemoveSystemequipmentIDs(ids ...int) *MedicalEquipmentUpdate {
	meu.mutation.RemoveSystemequipmentIDs(ids...)
	return meu
}

// RemoveSystemequipment removes systemequipment edges to Systemequipment.
func (meu *MedicalEquipmentUpdate) RemoveSystemequipment(s ...*Systemequipment) *MedicalEquipmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return meu.RemoveSystemequipmentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (meu *MedicalEquipmentUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(meu.hooks) == 0 {
		affected, err = meu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalEquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			meu.mutation = mutation
			affected, err = meu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(meu.hooks) - 1; i >= 0; i-- {
			mut = meu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, meu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (meu *MedicalEquipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := meu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (meu *MedicalEquipmentUpdate) Exec(ctx context.Context) error {
	_, err := meu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (meu *MedicalEquipmentUpdate) ExecX(ctx context.Context) {
	if err := meu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (meu *MedicalEquipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalequipment.Table,
			Columns: medicalequipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalequipment.FieldID,
			},
		},
	}
	if ps := meu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := meu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalequipment.FieldName,
		})
	}
	if value, ok := meu.mutation.Stock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: medicalequipment.FieldStock,
		})
	}
	if value, ok := meu.mutation.AddedStock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: medicalequipment.FieldStock,
		})
	}
	if nodes := meu.mutation.RemovedSystemequipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalequipment.SystemequipmentTable,
			Columns: []string{medicalequipment.SystemequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: systemequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := meu.mutation.SystemequipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalequipment.SystemequipmentTable,
			Columns: []string{medicalequipment.SystemequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: systemequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, meu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalequipment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MedicalEquipmentUpdateOne is the builder for updating a single MedicalEquipment entity.
type MedicalEquipmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *MedicalEquipmentMutation
}

// SetName sets the name field.
func (meuo *MedicalEquipmentUpdateOne) SetName(s string) *MedicalEquipmentUpdateOne {
	meuo.mutation.SetName(s)
	return meuo
}

// SetStock sets the stock field.
func (meuo *MedicalEquipmentUpdateOne) SetStock(i int) *MedicalEquipmentUpdateOne {
	meuo.mutation.ResetStock()
	meuo.mutation.SetStock(i)
	return meuo
}

// AddStock adds i to stock.
func (meuo *MedicalEquipmentUpdateOne) AddStock(i int) *MedicalEquipmentUpdateOne {
	meuo.mutation.AddStock(i)
	return meuo
}

// AddSystemequipmentIDs adds the systemequipment edge to Systemequipment by ids.
func (meuo *MedicalEquipmentUpdateOne) AddSystemequipmentIDs(ids ...int) *MedicalEquipmentUpdateOne {
	meuo.mutation.AddSystemequipmentIDs(ids...)
	return meuo
}

// AddSystemequipment adds the systemequipment edges to Systemequipment.
func (meuo *MedicalEquipmentUpdateOne) AddSystemequipment(s ...*Systemequipment) *MedicalEquipmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return meuo.AddSystemequipmentIDs(ids...)
}

// Mutation returns the MedicalEquipmentMutation object of the builder.
func (meuo *MedicalEquipmentUpdateOne) Mutation() *MedicalEquipmentMutation {
	return meuo.mutation
}

// RemoveSystemequipmentIDs removes the systemequipment edge to Systemequipment by ids.
func (meuo *MedicalEquipmentUpdateOne) RemoveSystemequipmentIDs(ids ...int) *MedicalEquipmentUpdateOne {
	meuo.mutation.RemoveSystemequipmentIDs(ids...)
	return meuo
}

// RemoveSystemequipment removes systemequipment edges to Systemequipment.
func (meuo *MedicalEquipmentUpdateOne) RemoveSystemequipment(s ...*Systemequipment) *MedicalEquipmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return meuo.RemoveSystemequipmentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (meuo *MedicalEquipmentUpdateOne) Save(ctx context.Context) (*MedicalEquipment, error) {

	var (
		err  error
		node *MedicalEquipment
	)
	if len(meuo.hooks) == 0 {
		node, err = meuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalEquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			meuo.mutation = mutation
			node, err = meuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(meuo.hooks) - 1; i >= 0; i-- {
			mut = meuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, meuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (meuo *MedicalEquipmentUpdateOne) SaveX(ctx context.Context) *MedicalEquipment {
	me, err := meuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return me
}

// Exec executes the query on the entity.
func (meuo *MedicalEquipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := meuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (meuo *MedicalEquipmentUpdateOne) ExecX(ctx context.Context) {
	if err := meuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (meuo *MedicalEquipmentUpdateOne) sqlSave(ctx context.Context) (me *MedicalEquipment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalequipment.Table,
			Columns: medicalequipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalequipment.FieldID,
			},
		},
	}
	id, ok := meuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MedicalEquipment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := meuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalequipment.FieldName,
		})
	}
	if value, ok := meuo.mutation.Stock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: medicalequipment.FieldStock,
		})
	}
	if value, ok := meuo.mutation.AddedStock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: medicalequipment.FieldStock,
		})
	}
	if nodes := meuo.mutation.RemovedSystemequipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalequipment.SystemequipmentTable,
			Columns: []string{medicalequipment.SystemequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: systemequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := meuo.mutation.SystemequipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalequipment.SystemequipmentTable,
			Columns: []string{medicalequipment.SystemequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: systemequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	me = &MedicalEquipment{config: meuo.config}
	_spec.Assign = me.assignValues
	_spec.ScanValues = me.scanValues()
	if err = sqlgraph.UpdateNode(ctx, meuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalequipment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return me, nil
}
