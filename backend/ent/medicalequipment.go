// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/poommin/app/ent/medicalequipment"
)

// Medicalequipment is the model entity for the Medicalequipment schema.
type Medicalequipment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MedicalID holds the value of the "Medical_ID" field.
	MedicalID string `json:"Medical_ID,omitempty"`
	// MedicalNAME holds the value of the "Medical_NAME" field.
	MedicalNAME string `json:"Medical_NAME,omitempty"`
	// MedicalStock holds the value of the "Medical_Stock" field.
	MedicalStock int `json:"Medical_Stock,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MedicalequipmentQuery when eager-loading is set.
	Edges MedicalequipmentEdges `json:"edges"`
}

// MedicalequipmentEdges holds the relations/edges for other nodes in the graph.
type MedicalequipmentEdges struct {
	// MedicalEquipment holds the value of the Medical_equipment edge.
	MedicalEquipment []*Systemequipment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MedicalEquipmentOrErr returns the MedicalEquipment value or an error if the edge
// was not loaded in eager-loading.
func (e MedicalequipmentEdges) MedicalEquipmentOrErr() ([]*Systemequipment, error) {
	if e.loadedTypes[0] {
		return e.MedicalEquipment, nil
	}
	return nil, &NotLoadedError{edge: "Medical_equipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Medicalequipment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Medical_ID
		&sql.NullString{}, // Medical_NAME
		&sql.NullInt64{},  // Medical_Stock
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Medicalequipment fields.
func (m *Medicalequipment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(medicalequipment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Medical_ID", values[0])
	} else if value.Valid {
		m.MedicalID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Medical_NAME", values[1])
	} else if value.Valid {
		m.MedicalNAME = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Medical_Stock", values[2])
	} else if value.Valid {
		m.MedicalStock = int(value.Int64)
	}
	return nil
}

// QueryMedicalEquipment queries the Medical_equipment edge of the Medicalequipment.
func (m *Medicalequipment) QueryMedicalEquipment() *SystemequipmentQuery {
	return (&MedicalequipmentClient{config: m.config}).QueryMedicalEquipment(m)
}

// Update returns a builder for updating this Medicalequipment.
// Note that, you need to call Medicalequipment.Unwrap() before calling this method, if this Medicalequipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Medicalequipment) Update() *MedicalequipmentUpdateOne {
	return (&MedicalequipmentClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Medicalequipment) Unwrap() *Medicalequipment {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Medicalequipment is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Medicalequipment) String() string {
	var builder strings.Builder
	builder.WriteString("Medicalequipment(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", Medical_ID=")
	builder.WriteString(m.MedicalID)
	builder.WriteString(", Medical_NAME=")
	builder.WriteString(m.MedicalNAME)
	builder.WriteString(", Medical_Stock=")
	builder.WriteString(fmt.Sprintf("%v", m.MedicalStock))
	builder.WriteByte(')')
	return builder.String()
}

// Medicalequipments is a parsable slice of Medicalequipment.
type Medicalequipments []*Medicalequipment

func (m Medicalequipments) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
