// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/poommin2543/app/ent/medicalequipment"
)

// MedicalEquipment is the model entity for the MedicalEquipment schema.
type MedicalEquipment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Stock holds the value of the "stock" field.
	Stock int `json:"stock,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MedicalEquipmentQuery when eager-loading is set.
	Edges MedicalEquipmentEdges `json:"edges"`
}

// MedicalEquipmentEdges holds the relations/edges for other nodes in the graph.
type MedicalEquipmentEdges struct {
	// Systemequipment holds the value of the systemequipment edge.
	Systemequipment []*Systemequipment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SystemequipmentOrErr returns the Systemequipment value or an error if the edge
// was not loaded in eager-loading.
func (e MedicalEquipmentEdges) SystemequipmentOrErr() ([]*Systemequipment, error) {
	if e.loadedTypes[0] {
		return e.Systemequipment, nil
	}
	return nil, &NotLoadedError{edge: "systemequipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MedicalEquipment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullInt64{},  // stock
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MedicalEquipment fields.
func (me *MedicalEquipment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(medicalequipment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	me.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		me.Name = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field stock", values[1])
	} else if value.Valid {
		me.Stock = int(value.Int64)
	}
	return nil
}

// QuerySystemequipment queries the systemequipment edge of the MedicalEquipment.
func (me *MedicalEquipment) QuerySystemequipment() *SystemequipmentQuery {
	return (&MedicalEquipmentClient{config: me.config}).QuerySystemequipment(me)
}

// Update returns a builder for updating this MedicalEquipment.
// Note that, you need to call MedicalEquipment.Unwrap() before calling this method, if this MedicalEquipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (me *MedicalEquipment) Update() *MedicalEquipmentUpdateOne {
	return (&MedicalEquipmentClient{config: me.config}).UpdateOne(me)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (me *MedicalEquipment) Unwrap() *MedicalEquipment {
	tx, ok := me.config.driver.(*txDriver)
	if !ok {
		panic("ent: MedicalEquipment is not a transactional entity")
	}
	me.config.driver = tx.drv
	return me
}

// String implements the fmt.Stringer.
func (me *MedicalEquipment) String() string {
	var builder strings.Builder
	builder.WriteString("MedicalEquipment(")
	builder.WriteString(fmt.Sprintf("id=%v", me.ID))
	builder.WriteString(", name=")
	builder.WriteString(me.Name)
	builder.WriteString(", stock=")
	builder.WriteString(fmt.Sprintf("%v", me.Stock))
	builder.WriteByte(')')
	return builder.String()
}

// MedicalEquipments is a parsable slice of MedicalEquipment.
type MedicalEquipments []*MedicalEquipment

func (me MedicalEquipments) config(cfg config) {
	for _i := range me {
		me[_i].config = cfg
	}
}
