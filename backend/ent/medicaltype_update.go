// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/poommin2543/app/ent/medicaltype"
	"github.com/poommin2543/app/ent/predicate"
	"github.com/poommin2543/app/ent/systemequipment"
)

// MedicalTypeUpdate is the builder for updating MedicalType entities.
type MedicalTypeUpdate struct {
	config
	hooks      []Hook
	mutation   *MedicalTypeMutation
	predicates []predicate.MedicalType
}

// Where adds a new predicate for the builder.
func (mtu *MedicalTypeUpdate) Where(ps ...predicate.MedicalType) *MedicalTypeUpdate {
	mtu.predicates = append(mtu.predicates, ps...)
	return mtu
}

// SetName sets the name field.
func (mtu *MedicalTypeUpdate) SetName(s string) *MedicalTypeUpdate {
	mtu.mutation.SetName(s)
	return mtu
}

// AddSystemequipmentIDs adds the systemequipment edge to Systemequipment by ids.
func (mtu *MedicalTypeUpdate) AddSystemequipmentIDs(ids ...int) *MedicalTypeUpdate {
	mtu.mutation.AddSystemequipmentIDs(ids...)
	return mtu
}

// AddSystemequipment adds the systemequipment edges to Systemequipment.
func (mtu *MedicalTypeUpdate) AddSystemequipment(s ...*Systemequipment) *MedicalTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mtu.AddSystemequipmentIDs(ids...)
}

// Mutation returns the MedicalTypeMutation object of the builder.
func (mtu *MedicalTypeUpdate) Mutation() *MedicalTypeMutation {
	return mtu.mutation
}

// RemoveSystemequipmentIDs removes the systemequipment edge to Systemequipment by ids.
func (mtu *MedicalTypeUpdate) RemoveSystemequipmentIDs(ids ...int) *MedicalTypeUpdate {
	mtu.mutation.RemoveSystemequipmentIDs(ids...)
	return mtu
}

// RemoveSystemequipment removes systemequipment edges to Systemequipment.
func (mtu *MedicalTypeUpdate) RemoveSystemequipment(s ...*Systemequipment) *MedicalTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mtu.RemoveSystemequipmentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mtu *MedicalTypeUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(mtu.hooks) == 0 {
		affected, err = mtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtu.mutation = mutation
			affected, err = mtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mtu.hooks) - 1; i >= 0; i-- {
			mut = mtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MedicalTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MedicalTypeUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MedicalTypeUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mtu *MedicalTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicaltype.Table,
			Columns: medicaltype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicaltype.FieldID,
			},
		},
	}
	if ps := mtu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicaltype.FieldName,
		})
	}
	if nodes := mtu.mutation.RemovedSystemequipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicaltype.SystemequipmentTable,
			Columns: []string{medicaltype.SystemequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: systemequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.SystemequipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicaltype.SystemequipmentTable,
			Columns: []string{medicaltype.SystemequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: systemequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicaltype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MedicalTypeUpdateOne is the builder for updating a single MedicalType entity.
type MedicalTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *MedicalTypeMutation
}

// SetName sets the name field.
func (mtuo *MedicalTypeUpdateOne) SetName(s string) *MedicalTypeUpdateOne {
	mtuo.mutation.SetName(s)
	return mtuo
}

// AddSystemequipmentIDs adds the systemequipment edge to Systemequipment by ids.
func (mtuo *MedicalTypeUpdateOne) AddSystemequipmentIDs(ids ...int) *MedicalTypeUpdateOne {
	mtuo.mutation.AddSystemequipmentIDs(ids...)
	return mtuo
}

// AddSystemequipment adds the systemequipment edges to Systemequipment.
func (mtuo *MedicalTypeUpdateOne) AddSystemequipment(s ...*Systemequipment) *MedicalTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mtuo.AddSystemequipmentIDs(ids...)
}

// Mutation returns the MedicalTypeMutation object of the builder.
func (mtuo *MedicalTypeUpdateOne) Mutation() *MedicalTypeMutation {
	return mtuo.mutation
}

// RemoveSystemequipmentIDs removes the systemequipment edge to Systemequipment by ids.
func (mtuo *MedicalTypeUpdateOne) RemoveSystemequipmentIDs(ids ...int) *MedicalTypeUpdateOne {
	mtuo.mutation.RemoveSystemequipmentIDs(ids...)
	return mtuo
}

// RemoveSystemequipment removes systemequipment edges to Systemequipment.
func (mtuo *MedicalTypeUpdateOne) RemoveSystemequipment(s ...*Systemequipment) *MedicalTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mtuo.RemoveSystemequipmentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (mtuo *MedicalTypeUpdateOne) Save(ctx context.Context) (*MedicalType, error) {

	var (
		err  error
		node *MedicalType
	)
	if len(mtuo.hooks) == 0 {
		node, err = mtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtuo.mutation = mutation
			node, err = mtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtuo.hooks) - 1; i >= 0; i-- {
			mut = mtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MedicalTypeUpdateOne) SaveX(ctx context.Context) *MedicalType {
	mt, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return mt
}

// Exec executes the query on the entity.
func (mtuo *MedicalTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MedicalTypeUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mtuo *MedicalTypeUpdateOne) sqlSave(ctx context.Context) (mt *MedicalType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicaltype.Table,
			Columns: medicaltype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicaltype.FieldID,
			},
		},
	}
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MedicalType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := mtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicaltype.FieldName,
		})
	}
	if nodes := mtuo.mutation.RemovedSystemequipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicaltype.SystemequipmentTable,
			Columns: []string{medicaltype.SystemequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: systemequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.SystemequipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicaltype.SystemequipmentTable,
			Columns: []string{medicaltype.SystemequipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: systemequipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	mt = &MedicalType{config: mtuo.config}
	_spec.Assign = mt.assignValues
	_spec.ScanValues = mt.scanValues()
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicaltype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return mt, nil
}
