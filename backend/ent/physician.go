// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/poommin/app/ent/physician"
)

// Physician is the model entity for the Physician schema.
type Physician struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PHYSICIANID holds the value of the "PHYSICIAN_ID" field.
	PHYSICIANID string `json:"PHYSICIAN_ID,omitempty"`
	// PHYSICIANNAME holds the value of the "PHYSICIAN_NAME" field.
	PHYSICIANNAME string `json:"PHYSICIAN_NAME,omitempty"`
	// PHYSICIANEMAIL holds the value of the "PHYSICIAN_EMAIL" field.
	PHYSICIANEMAIL string `json:"PHYSICIAN_EMAIL,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PhysicianQuery when eager-loading is set.
	Edges PhysicianEdges `json:"edges"`
}

// PhysicianEdges holds the relations/edges for other nodes in the graph.
type PhysicianEdges struct {
	// UserPhysician holds the value of the User_Physician edge.
	UserPhysician []*Systemequipment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserPhysicianOrErr returns the UserPhysician value or an error if the edge
// was not loaded in eager-loading.
func (e PhysicianEdges) UserPhysicianOrErr() ([]*Systemequipment, error) {
	if e.loadedTypes[0] {
		return e.UserPhysician, nil
	}
	return nil, &NotLoadedError{edge: "User_Physician"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Physician) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // PHYSICIAN_ID
		&sql.NullString{}, // PHYSICIAN_NAME
		&sql.NullString{}, // PHYSICIAN_EMAIL
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Physician fields.
func (ph *Physician) assignValues(values ...interface{}) error {
	if m, n := len(values), len(physician.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ph.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PHYSICIAN_ID", values[0])
	} else if value.Valid {
		ph.PHYSICIANID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PHYSICIAN_NAME", values[1])
	} else if value.Valid {
		ph.PHYSICIANNAME = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field PHYSICIAN_EMAIL", values[2])
	} else if value.Valid {
		ph.PHYSICIANEMAIL = value.String
	}
	return nil
}

// QueryUserPhysician queries the User_Physician edge of the Physician.
func (ph *Physician) QueryUserPhysician() *SystemequipmentQuery {
	return (&PhysicianClient{config: ph.config}).QueryUserPhysician(ph)
}

// Update returns a builder for updating this Physician.
// Note that, you need to call Physician.Unwrap() before calling this method, if this Physician
// was returned from a transaction, and the transaction was committed or rolled back.
func (ph *Physician) Update() *PhysicianUpdateOne {
	return (&PhysicianClient{config: ph.config}).UpdateOne(ph)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ph *Physician) Unwrap() *Physician {
	tx, ok := ph.config.driver.(*txDriver)
	if !ok {
		panic("ent: Physician is not a transactional entity")
	}
	ph.config.driver = tx.drv
	return ph
}

// String implements the fmt.Stringer.
func (ph *Physician) String() string {
	var builder strings.Builder
	builder.WriteString("Physician(")
	builder.WriteString(fmt.Sprintf("id=%v", ph.ID))
	builder.WriteString(", PHYSICIAN_ID=")
	builder.WriteString(ph.PHYSICIANID)
	builder.WriteString(", PHYSICIAN_NAME=")
	builder.WriteString(ph.PHYSICIANNAME)
	builder.WriteString(", PHYSICIAN_EMAIL=")
	builder.WriteString(ph.PHYSICIANEMAIL)
	builder.WriteByte(')')
	return builder.String()
}

// Physicians is a parsable slice of Physician.
type Physicians []*Physician

func (ph Physicians) config(cfg config) {
	for _i := range ph {
		ph[_i].config = cfg
	}
}
