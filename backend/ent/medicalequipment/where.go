// Code generated by entc, DO NOT EDIT.

package medicalequipment

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/poommin/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// MedicalID applies equality check predicate on the "Medical_ID" field. It's identical to MedicalIDEQ.
func MedicalID(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalID), v))
	})
}

// MedicalNAME applies equality check predicate on the "Medical_NAME" field. It's identical to MedicalNAMEEQ.
func MedicalNAME(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalNAME), v))
	})
}

// MedicalStock applies equality check predicate on the "Medical_Stock" field. It's identical to MedicalStockEQ.
func MedicalStock(v int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalStock), v))
	})
}

// MedicalIDEQ applies the EQ predicate on the "Medical_ID" field.
func MedicalIDEQ(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalID), v))
	})
}

// MedicalIDNEQ applies the NEQ predicate on the "Medical_ID" field.
func MedicalIDNEQ(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMedicalID), v))
	})
}

// MedicalIDIn applies the In predicate on the "Medical_ID" field.
func MedicalIDIn(vs ...string) predicate.Medicalequipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicalequipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMedicalID), v...))
	})
}

// MedicalIDNotIn applies the NotIn predicate on the "Medical_ID" field.
func MedicalIDNotIn(vs ...string) predicate.Medicalequipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicalequipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMedicalID), v...))
	})
}

// MedicalIDGT applies the GT predicate on the "Medical_ID" field.
func MedicalIDGT(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMedicalID), v))
	})
}

// MedicalIDGTE applies the GTE predicate on the "Medical_ID" field.
func MedicalIDGTE(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMedicalID), v))
	})
}

// MedicalIDLT applies the LT predicate on the "Medical_ID" field.
func MedicalIDLT(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMedicalID), v))
	})
}

// MedicalIDLTE applies the LTE predicate on the "Medical_ID" field.
func MedicalIDLTE(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMedicalID), v))
	})
}

// MedicalIDContains applies the Contains predicate on the "Medical_ID" field.
func MedicalIDContains(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMedicalID), v))
	})
}

// MedicalIDHasPrefix applies the HasPrefix predicate on the "Medical_ID" field.
func MedicalIDHasPrefix(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMedicalID), v))
	})
}

// MedicalIDHasSuffix applies the HasSuffix predicate on the "Medical_ID" field.
func MedicalIDHasSuffix(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMedicalID), v))
	})
}

// MedicalIDEqualFold applies the EqualFold predicate on the "Medical_ID" field.
func MedicalIDEqualFold(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMedicalID), v))
	})
}

// MedicalIDContainsFold applies the ContainsFold predicate on the "Medical_ID" field.
func MedicalIDContainsFold(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMedicalID), v))
	})
}

// MedicalNAMEEQ applies the EQ predicate on the "Medical_NAME" field.
func MedicalNAMEEQ(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalNAME), v))
	})
}

// MedicalNAMENEQ applies the NEQ predicate on the "Medical_NAME" field.
func MedicalNAMENEQ(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMedicalNAME), v))
	})
}

// MedicalNAMEIn applies the In predicate on the "Medical_NAME" field.
func MedicalNAMEIn(vs ...string) predicate.Medicalequipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicalequipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMedicalNAME), v...))
	})
}

// MedicalNAMENotIn applies the NotIn predicate on the "Medical_NAME" field.
func MedicalNAMENotIn(vs ...string) predicate.Medicalequipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicalequipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMedicalNAME), v...))
	})
}

// MedicalNAMEGT applies the GT predicate on the "Medical_NAME" field.
func MedicalNAMEGT(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMedicalNAME), v))
	})
}

// MedicalNAMEGTE applies the GTE predicate on the "Medical_NAME" field.
func MedicalNAMEGTE(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMedicalNAME), v))
	})
}

// MedicalNAMELT applies the LT predicate on the "Medical_NAME" field.
func MedicalNAMELT(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMedicalNAME), v))
	})
}

// MedicalNAMELTE applies the LTE predicate on the "Medical_NAME" field.
func MedicalNAMELTE(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMedicalNAME), v))
	})
}

// MedicalNAMEContains applies the Contains predicate on the "Medical_NAME" field.
func MedicalNAMEContains(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMedicalNAME), v))
	})
}

// MedicalNAMEHasPrefix applies the HasPrefix predicate on the "Medical_NAME" field.
func MedicalNAMEHasPrefix(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMedicalNAME), v))
	})
}

// MedicalNAMEHasSuffix applies the HasSuffix predicate on the "Medical_NAME" field.
func MedicalNAMEHasSuffix(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMedicalNAME), v))
	})
}

// MedicalNAMEEqualFold applies the EqualFold predicate on the "Medical_NAME" field.
func MedicalNAMEEqualFold(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMedicalNAME), v))
	})
}

// MedicalNAMEContainsFold applies the ContainsFold predicate on the "Medical_NAME" field.
func MedicalNAMEContainsFold(v string) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMedicalNAME), v))
	})
}

// MedicalStockEQ applies the EQ predicate on the "Medical_Stock" field.
func MedicalStockEQ(v int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMedicalStock), v))
	})
}

// MedicalStockNEQ applies the NEQ predicate on the "Medical_Stock" field.
func MedicalStockNEQ(v int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMedicalStock), v))
	})
}

// MedicalStockIn applies the In predicate on the "Medical_Stock" field.
func MedicalStockIn(vs ...int) predicate.Medicalequipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicalequipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMedicalStock), v...))
	})
}

// MedicalStockNotIn applies the NotIn predicate on the "Medical_Stock" field.
func MedicalStockNotIn(vs ...int) predicate.Medicalequipment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Medicalequipment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMedicalStock), v...))
	})
}

// MedicalStockGT applies the GT predicate on the "Medical_Stock" field.
func MedicalStockGT(v int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMedicalStock), v))
	})
}

// MedicalStockGTE applies the GTE predicate on the "Medical_Stock" field.
func MedicalStockGTE(v int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMedicalStock), v))
	})
}

// MedicalStockLT applies the LT predicate on the "Medical_Stock" field.
func MedicalStockLT(v int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMedicalStock), v))
	})
}

// MedicalStockLTE applies the LTE predicate on the "Medical_Stock" field.
func MedicalStockLTE(v int) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMedicalStock), v))
	})
}

// HasMedicalEquipment applies the HasEdge predicate on the "Medical_equipment" edge.
func HasMedicalEquipment() predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MedicalEquipmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MedicalEquipmentTable, MedicalEquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMedicalEquipmentWith applies the HasEdge predicate on the "Medical_equipment" edge with a given conditions (other predicates).
func HasMedicalEquipmentWith(preds ...predicate.Systemequipment) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MedicalEquipmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MedicalEquipmentTable, MedicalEquipmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Medicalequipment) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Medicalequipment) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Medicalequipment) predicate.Medicalequipment {
	return predicate.Medicalequipment(func(s *sql.Selector) {
		p(s.Not())
	})
}
