basePath: /api/v1
definitions:
  ent.MedicalEquipment:
    properties:
      edges:
        $ref: '#/definitions/ent.MedicalEquipmentEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the MedicalEquipmentQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      stock:
        description: Stock holds the value of the "stock" field.
        type: integer
    type: object
  ent.MedicalEquipmentEdges:
    properties:
      systemequipment:
        description: Systemequipment holds the value of the systemequipment edge.
        items:
          $ref: '#/definitions/ent.Systemequipment'
        type: array
    type: object
  ent.MedicalType:
    properties:
      edges:
        $ref: '#/definitions/ent.MedicalTypeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the MedicalTypeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  ent.MedicalTypeEdges:
    properties:
      systemequipment:
        description: Systemequipment holds the value of the systemequipment edge.
        items:
          $ref: '#/definitions/ent.Systemequipment'
        type: array
    type: object
  ent.Physician:
    properties:
      edges:
        $ref: '#/definitions/ent.PhysicianEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PhysicianQuery when eager-loading is set.
        type: object
      email:
        description: Email holds the value of the "email" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  ent.PhysicianEdges:
    properties:
      systemequipment:
        description: Systemequipment holds the value of the systemequipment edge.
        items:
          $ref: '#/definitions/ent.Systemequipment'
        type: array
    type: object
  ent.Systemequipment:
    properties:
      edges:
        $ref: '#/definitions/ent.SystemequipmentEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the SystemequipmentQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.SystemequipmentEdges:
    properties:
      medicalequipment:
        $ref: '#/definitions/ent.MedicalEquipment'
        description: Medicalequipment holds the value of the medicalequipment edge.
        type: object
      medicaltype:
        $ref: '#/definitions/ent.MedicalType'
        description: Medicaltype holds the value of the medicaltype edge.
        type: object
      physician:
        $ref: '#/definitions/ent.Physician'
        description: Physician holds the value of the physician edge.
        type: object
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API
  version: "1.0"
paths:
  /medicalequipments:
    get:
      description: list medicalequipment entities
      operationId: list-medicalequipment
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.MedicalEquipment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List medicalequipment entities
    post:
      consumes:
      - application/json
      description: Create medicalequipment
      operationId: create-medicalequipment
      parameters:
      - description: Medicalequipment entity
        in: body
        name: medicalequipment
        required: true
        schema:
          $ref: '#/definitions/ent.MedicalEquipment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.MedicalEquipment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create medicalequipment
  /medicalequipments/{id}:
    delete:
      description: get medicalequipment by ID
      operationId: delete-medicalequipment
      parameters:
      - description: Medicalequipment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a medicalequipment entity by ID
    get:
      description: get medicalequipment by ID
      operationId: get-medicalequipment
      parameters:
      - description: Medicalequipment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.MedicalEquipment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a medicalequipment entity by ID
    put:
      consumes:
      - application/json
      description: update medicalequipment by ID
      operationId: update-medicalequipment
      parameters:
      - description: Medicalequipment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Medicalequipment entity
        in: body
        name: medicalequipment
        required: true
        schema:
          $ref: '#/definitions/ent.MedicalEquipment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.MedicalEquipment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a medicalequipment entity by ID
  /medicaltypes:
    get:
      description: list medicaltype entities
      operationId: list-medicaltype
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.MedicalType'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List medicaltype entities
    post:
      consumes:
      - application/json
      description: Create medicaltype
      operationId: create-medicaltype
      parameters:
      - description: Medicaltype entity
        in: body
        name: medicaltype
        required: true
        schema:
          $ref: '#/definitions/ent.MedicalType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.MedicalType'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create medicaltype
  /medicaltypes/{id}:
    delete:
      description: get medicaltype by ID
      operationId: delete-medicaltype
      parameters:
      - description: Medicaltype ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a medicaltype entity by ID
    get:
      description: get medicaltype by ID
      operationId: get-medicaltype
      parameters:
      - description: MedicalType ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.MedicalType'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a medicaltype entity by ID
    put:
      consumes:
      - application/json
      description: update medicaltype by ID
      operationId: update-medicaltype
      parameters:
      - description: Medicaltype ID
        in: path
        name: id
        required: true
        type: integer
      - description: Medicaltype entity
        in: body
        name: medicaltype
        required: true
        schema:
          $ref: '#/definitions/ent.MedicalType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.MedicalType'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a medicaltype entity by ID
  /physicians:
    get:
      description: list physician entities
      operationId: list-physician
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Physician'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List physician entities
    post:
      consumes:
      - application/json
      description: Create physician
      operationId: create-physician
      parameters:
      - description: Physician entity
        in: body
        name: physician
        required: true
        schema:
          $ref: '#/definitions/ent.Physician'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Physician'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create physician
  /physicians/{id}:
    delete:
      description: get physician by ID
      operationId: delete-physician
      parameters:
      - description: Physician ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a physician entity by ID
    get:
      description: get physician by ID
      operationId: get-physician
      parameters:
      - description: Physician ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Physician'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a physician entity by ID
    put:
      consumes:
      - application/json
      description: update physician by ID
      operationId: update-physician
      parameters:
      - description: Physician ID
        in: path
        name: id
        required: true
        type: integer
      - description: Physician entity
        in: body
        name: physician
        required: true
        schema:
          $ref: '#/definitions/ent.Physician'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Physician'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a physician entity by ID
  /systemequipments:
    get:
      description: list systemequipment entities
      operationId: list-systemequipment
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Systemequipment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List systemequipment entities
    post:
      consumes:
      - application/json
      description: Create systemequipment
      operationId: create-systemequipment
      parameters:
      - description: Systemequipment entity
        in: body
        name: systemequipment
        required: true
        schema:
          $ref: '#/definitions/ent.Systemequipment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Systemequipment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create systemequipment
  /systemequipments/{id}:
    delete:
      description: get systemequipment by ID
      operationId: delete-systemequipment
      parameters:
      - description: Systemequipment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a systemequipment entity by ID
    get:
      description: get systemequipment by ID
      operationId: get-systemequipment
      parameters:
      - description: Systemequipment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Systemequipment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a systemequipment entity by ID
    put:
      consumes:
      - application/json
      description: update systemequipment by ID
      operationId: update-systemequipment
      parameters:
      - description: Systemequipment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Systemequipment entity
        in: body
        name: systemequipment
        required: true
        schema:
          $ref: '#/definitions/ent.Systemequipment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Systemequipment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a systemequipment entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
