// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-09-19 17:23:35.6587554 +0700 +07 m=+2.695514901

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/medicalequipments": {
            "get": {
                "description": "list medicalequipment entities",
                "produces": [
                    "application/json"
                ],
                "summary": "List medicalequipment entities",
                "operationId": "list-medicalequipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Medicalequipment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "post": {
                "description": "Create medicalequipment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create medicalequipment",
                "operationId": "create-medicalequipment",
                "parameters": [
                    {
                        "description": "Medicalequipment entity",
                        "name": "medicalequipment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/ent.Medicalequipment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Medicalequipment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/medicalequipments/{id}": {
            "get": {
                "description": "get medicalequipment by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a medicalequipment entity by ID",
                "operationId": "get-medicalequipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Medicalequipment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Medicalequipment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "put": {
                "description": "update medicalequipment by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a medicalequipment entity by ID",
                "operationId": "update-medicalequipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Medicalequipment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Medicalequipment entity",
                        "name": "medicalequipment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/ent.Medicalequipment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Medicalequipment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "delete": {
                "description": "get medicalequipment by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a medicalequipment entity by ID",
                "operationId": "delete-medicalequipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Medicalequipment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/medicaltypes": {
            "get": {
                "description": "list medicaltype entities",
                "produces": [
                    "application/json"
                ],
                "summary": "List medicaltype entities",
                "operationId": "list-medicaltype",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Medicaltype"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "post": {
                "description": "Create medicaltype",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create medicaltype",
                "operationId": "create-medicaltype",
                "parameters": [
                    {
                        "description": "Medicaltype entity",
                        "name": "medicaltype",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/ent.Medicaltype"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Medicaltype"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/medicaltypes/{id}": {
            "get": {
                "description": "get medicaltype by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a medicaltype entity by ID",
                "operationId": "get-medicaltype",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Medicaltype ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Medicaltype"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "put": {
                "description": "update medicaltype by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a medicaltype entity by ID",
                "operationId": "update-medicaltype",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Medicaltype ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Medicaltype entity",
                        "name": "medicaltype",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/ent.Medicaltype"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Medicaltype"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "delete": {
                "description": "get medicaltype by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a medicaltype entity by ID",
                "operationId": "delete-medicaltype",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Medicaltype ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/physicians": {
            "get": {
                "description": "list physician entities",
                "produces": [
                    "application/json"
                ],
                "summary": "List physician entities",
                "operationId": "list-physician",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Physician"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "post": {
                "description": "Create physician",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create physician",
                "operationId": "create-physician",
                "parameters": [
                    {
                        "description": "Physician entity",
                        "name": "physician",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/ent.Physician"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Physician"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/physicians/{id}": {
            "get": {
                "description": "get physician by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a physician entity by ID",
                "operationId": "get-physician",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Physician ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Physician"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "put": {
                "description": "update physician by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a physician entity by ID",
                "operationId": "update-physician",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Physician ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Physician entity",
                        "name": "physician",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/ent.Physician"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Physician"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "delete": {
                "description": "get physician by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a physician entity by ID",
                "operationId": "delete-physician",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Physician ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/systemequipments": {
            "get": {
                "description": "list systemequipment entities",
                "produces": [
                    "application/json"
                ],
                "summary": "List systemequipment entities",
                "operationId": "list-systemequipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Systemequipment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "post": {
                "description": "Create systemequipment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create systemequipment",
                "operationId": "create-systemequipment",
                "parameters": [
                    {
                        "description": "Systemequipment entity",
                        "name": "systemequipment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/ent.Systemequipment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Systemequipment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/systemequipments/{id}": {
            "get": {
                "description": "get systemequipment by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a systemequipment entity by ID",
                "operationId": "get-systemequipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Systemequipment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Systemequipment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "put": {
                "description": "update systemequipment by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a systemequipment entity by ID",
                "operationId": "update-systemequipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Systemequipment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Systemequipment entity",
                        "name": "systemequipment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/ent.Systemequipment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Systemequipment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "delete": {
                "description": "get systemequipment by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a systemequipment entity by ID",
                "operationId": "delete-systemequipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Systemequipment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "list user entities",
                "produces": [
                    "application/json"
                ],
                "summary": "List user entities",
                "operationId": "list-user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "post": {
                "description": "Create user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create user",
                "operationId": "create-user",
                "parameters": [
                    {
                        "description": "User entity",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/ent.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "get user by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a user entity by ID",
                "operationId": "get-user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "put": {
                "description": "update user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a user entity by ID",
                "operationId": "update-user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User entity",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/ent.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "delete": {
                "description": "get user by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a user entity by ID",
                "operationId": "delete-user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ent.Hook": {},
        "ent.Medicalequipment": {
            "type": "object",
            "properties": {
                "Medical_ID": {
                    "description": "MedicalID holds the value of the \"Medical_ID\" field.",
                    "type": "string"
                },
                "Medical_NAME": {
                    "description": "MedicalNAME holds the value of the \"Medical_NAME\" field.",
                    "type": "string"
                },
                "Medical_Stock": {
                    "description": "MedicalStock holds the value of the \"Medical_Stock\" field.",
                    "type": "integer"
                },
                "debug": {
                    "description": "debug enable a debug logging.",
                    "type": "boolean"
                },
                "driver": {
                    "description": "driver used for executing database requests.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the MedicalequipmentQuery when eager-loading is set.",
                    "type": "object",
                    "$ref": "#/definitions/ent.MedicalequipmentEdges"
                },
                "hooks": {
                    "description": "hooks to execute on mutations.",
                    "type": "object",
                    "$ref": "#/definitions/ent.hooks"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                }
            }
        },
        "ent.MedicalequipmentEdges": {
            "type": "object",
            "properties": {
                "loadedTypes": {
                    "description": "loadedTypes holds the information for reporting if a\ntype was loaded (or requested) in eager-loading or not.",
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                },
                "medicalEquipment": {
                    "description": "MedicalEquipment holds the value of the Medical_equipment edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Systemequipment"
                    }
                }
            }
        },
        "ent.Medicaltype": {
            "type": "object",
            "properties": {
                "Type_ID": {
                    "description": "TypeID holds the value of the \"Type_ID\" field.",
                    "type": "string"
                },
                "Type_name": {
                    "description": "TypeName holds the value of the \"Type_name\" field.",
                    "type": "string"
                },
                "debug": {
                    "description": "debug enable a debug logging.",
                    "type": "boolean"
                },
                "driver": {
                    "description": "driver used for executing database requests.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the MedicaltypeQuery when eager-loading is set.",
                    "type": "object",
                    "$ref": "#/definitions/ent.MedicaltypeEdges"
                },
                "hooks": {
                    "description": "hooks to execute on mutations.",
                    "type": "object",
                    "$ref": "#/definitions/ent.hooks"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                }
            }
        },
        "ent.MedicaltypeEdges": {
            "type": "object",
            "properties": {
                "loadedTypes": {
                    "description": "loadedTypes holds the information for reporting if a\ntype was loaded (or requested) in eager-loading or not.",
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                },
                "medicalType": {
                    "description": "MedicalType holds the value of the Medical_type edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Systemequipment"
                    }
                }
            }
        },
        "ent.Physician": {
            "type": "object",
            "properties": {
                "PHYSICIAN_EMAIL": {
                    "description": "PHYSICIANEMAIL holds the value of the \"PHYSICIAN_EMAIL\" field.",
                    "type": "string"
                },
                "PHYSICIAN_ID": {
                    "description": "PHYSICIANID holds the value of the \"PHYSICIAN_ID\" field.",
                    "type": "string"
                },
                "PHYSICIAN_NAME": {
                    "description": "PHYSICIANNAME holds the value of the \"PHYSICIAN_NAME\" field.",
                    "type": "string"
                },
                "debug": {
                    "description": "debug enable a debug logging.",
                    "type": "boolean"
                },
                "driver": {
                    "description": "driver used for executing database requests.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the PhysicianQuery when eager-loading is set.",
                    "type": "object",
                    "$ref": "#/definitions/ent.PhysicianEdges"
                },
                "hooks": {
                    "description": "hooks to execute on mutations.",
                    "type": "object",
                    "$ref": "#/definitions/ent.hooks"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                }
            }
        },
        "ent.PhysicianEdges": {
            "type": "object",
            "properties": {
                "loadedTypes": {
                    "description": "loadedTypes holds the information for reporting if a\ntype was loaded (or requested) in eager-loading or not.",
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                },
                "userPhysician": {
                    "description": "UserPhysician holds the value of the User_Physician edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Systemequipment"
                    }
                }
            }
        },
        "ent.Systemequipment": {
            "type": "object",
            "properties": {
                "Medical_ID": {
                    "description": "MedicalID holds the value of the \"Medical_ID\" field.",
                    "type": "string"
                },
                "PHYSICIAN_ID": {
                    "description": "PHYSICIANID holds the value of the \"PHYSICIAN_ID\" field.",
                    "type": "string"
                },
                "System_DATA": {
                    "description": "SystemDATA holds the value of the \"System_DATA\" field.",
                    "type": "string"
                },
                "System_ID": {
                    "description": "SystemID holds the value of the \"System_ID\" field.",
                    "type": "string"
                },
                "Type_ID": {
                    "description": "TypeID holds the value of the \"Type_ID\" field.",
                    "type": "string"
                },
                "debug": {
                    "description": "debug enable a debug logging.",
                    "type": "boolean"
                },
                "driver": {
                    "description": "driver used for executing database requests.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the SystemequipmentQuery when eager-loading is set.",
                    "type": "object",
                    "$ref": "#/definitions/ent.SystemequipmentEdges"
                },
                "hooks": {
                    "description": "hooks to execute on mutations.",
                    "type": "object",
                    "$ref": "#/definitions/ent.hooks"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "medicalequipment_medical_equipment": {
                    "type": "integer"
                },
                "medicaltype_medical_type": {
                    "type": "integer"
                },
                "physician_user_physician": {
                    "type": "integer"
                }
            }
        },
        "ent.SystemequipmentEdges": {
            "type": "object",
            "properties": {
                "loadedTypes": {
                    "description": "loadedTypes holds the information for reporting if a\ntype was loaded (or requested) in eager-loading or not.",
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                },
                "owner": {
                    "description": "Owner holds the value of the owner edge.",
                    "type": "object",
                    "$ref": "#/definitions/ent.Physician"
                },
                "ownera": {
                    "description": "Ownera holds the value of the ownera edge.",
                    "type": "object",
                    "$ref": "#/definitions/ent.Medicalequipment"
                },
                "ownerf": {
                    "description": "Ownerf holds the value of the ownerf edge.",
                    "type": "object",
                    "$ref": "#/definitions/ent.Medicaltype"
                }
            }
        },
        "ent.User": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "Age holds the value of the \"age\" field.",
                    "type": "integer"
                },
                "debug": {
                    "description": "debug enable a debug logging.",
                    "type": "boolean"
                },
                "driver": {
                    "description": "driver used for executing database requests.",
                    "type": "string"
                },
                "hooks": {
                    "description": "hooks to execute on mutations.",
                    "type": "object",
                    "$ref": "#/definitions/ent.hooks"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                }
            }
        },
        "ent.hooks": {
            "type": "object",
            "properties": {
                "medicalequipment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Hook"
                    }
                },
                "medicaltype": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Hook"
                    }
                },
                "physician": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Hook"
                    }
                },
                "systemequipment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Hook"
                    }
                }
            }
        },
        "gin.H": {
            "type": "object",
            "additionalProperties": {
                "type": "object"
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information"
            }
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "read": " Grants read access",
                "write": " Grants write access"
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "SUT SA Example API",
	Description: "This is a sample server for SUT SE 2563",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
